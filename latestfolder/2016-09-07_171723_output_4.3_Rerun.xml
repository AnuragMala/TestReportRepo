<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.8.1 (Jython 2.7.0 on java1.8.0_101)" generated="20160907 17:17:25.350">
<suite source="C:\PCDetector_Testing\Testing\Robot" name="Robot" id="s1">
<suite source="C:\PCDetector_Testing\Testing\Robot\Tests" name="Tests" id="s1-s1">
<kw type="setup" name="test suite setup">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${now} = BuiltIn.Get Time">
<doc>Returns the given time in the requested format.</doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:17:27.222">${now} = 2016-09-07 17:17:27</msg>
<status endtime="20160907 17:17:27.222" starttime="20160907 17:17:27.206" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${SuiteStartTime}</arg>
<arg>${now}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:17:27.222">${SuiteStartTime} = 2016-09-07 17:17:27</msg>
<status endtime="20160907 17:17:27.222" starttime="20160907 17:17:27.222" status="PASS"></status>
</kw>
<status endtime="20160907 17:17:27.238" starttime="20160907 17:17:27.206" status="PASS"></status>
</kw>
<suite source="C:\PCDetector_Testing\Testing\Robot\Tests\10__Functional_Tests" name="Functional Tests" id="s1-s1-s1">
<suite source="C:\PCDetector_Testing\Testing\Robot\Tests\10__Functional_Tests\00__Start_Application.txt" name="Start Application" id="s1-s1-s1-s1">
<test name="Start PC Detector Application" id="s1-s1-s1-s1-t1">
<kw type="setup" name="Test Case Setup">
<doc>Make sure that the default configuration and license are used.</doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetectorKeywords.Copy Configuration File">
<doc>Robot keyword: Replace Configuration File in installation folder with Configuration from repository</doc>
<arguments>
<arg>${Configuration_All_Streaming_Active}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:17:28.657">SourceFile:  C:\PCDetector_Testing\Testing\Resources\ConfigurationFiles\TTX_WatercastProp_AllStreaming1234.cfg
DestinationFile:  F:\civolution\Cfg\TTX_WatercastProp.cfg
FileExists value:  True</msg>
<status endtime="20160907 17:17:28.657" starttime="20160907 17:17:28.642" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy License File">
<doc>Robot keyword: Replace License in installation folder with license from repository</doc>
<arguments>
<arg>${License_All_Features_Active}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:17:28.657">SourceFile:  C:\PCDetector_Testing\Testing\Resources\LicenseFiles\TeletraxCVBSSVIDDetector_All_Features_Activated.lic
DestinationFile:  F:\civolution\TeletraxCVBSSVIDDetector.lic
FileExists value:  True</msg>
<status endtime="20160907 17:17:28.673" starttime="20160907 17:17:28.657" status="PASS"></status>
</kw>
<status endtime="20160907 17:17:28.673" starttime="20160907 17:17:28.626" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:18:01.698">License warning not found, no need to make it disappear</msg>
<status endtime="20160907 17:18:01.698" starttime="20160907 17:17:28.673" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:18:16.715">Slept 15 seconds</msg>
<status endtime="20160907 17:18:16.746" starttime="20160907 17:18:01.698" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:18:18.805">[log] CLICK on L(214,121)@S(0)[0,0 1460x963]
[log] CLICK on L(1081,122)@S(0)[0,0 1460x963]</msg>
<status endtime="20160907 17:18:18.805" starttime="20160907 17:18:16.746" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>default</tag>
</tags>
<status critical="yes" endtime="20160907 17:18:18.805" starttime="20160907 17:17:28.626" status="PASS"></status>
</test>
<doc></doc>
<metadata>
</metadata>
<status endtime="20160907 17:18:18.821" starttime="20160907 17:17:27.253" status="PASS"></status>
</suite>
<suite source="C:\PCDetector_Testing\Testing\Robot\Tests\10__Functional_Tests\01__Start_and_Stop_Channels.txt" name="Start and Stop Channels" id="s1-s1-s1-s2">
<test name="Stop and Start Every Channel In Configuration, One By One" id="s1-s1-s1-s2-t1">
<kw type="setup" name="ChannelRegion.Confirm All Errors">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:18:32.539">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:18:32.570" starttime="20160907 17:18:19.008" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfChannels} = PCDetectorKeywords.Number Of Channels In Configuration">
<doc></doc>
<arguments>
<arg>non-UDP</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:18:32.570">${NrOfChannels} = 4</msg>
<status endtime="20160907 17:18:32.570" starttime="20160907 17:18:32.570" status="PASS"></status>
</kw>
<kw type="for" name="${channel} IN RANGE [ 1 | ${NrOfChannels} + 1 ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${channel} = 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:18:32.633">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:18:32.633" starttime="20160907 17:18:32.586" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Stop Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:18:41.865">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160907 17:18:41.865" starttime="20160907 17:18:32.633" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Stopped</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:18:41.881">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Stopped">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:18:45.420">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:18:45.436" starttime="20160907 17:18:41.896" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:18:45.436">'Channel Stopped ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:18:45.436">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:18:45.436">Evaluating 'Channel Stopped ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:18:45.452">Comparing as boolean values</msg>
<status endtime="20160907 17:18:45.452" starttime="20160907 17:18:45.436" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:18:45.452">Requirement check on 'Channel Stopped ${region} [True] = True' after 3 seconds</msg>
<status endtime="20160907 17:18:45.452" starttime="20160907 17:18:41.865" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Start Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:18:50.684">Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160907 17:18:50.684" starttime="20160907 17:18:45.452" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Busy</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:18:50.700">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Busy">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:18:53.926">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:18:53.926" starttime="20160907 17:18:50.716" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:18:53.926">'Channel Busy ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:18:53.941">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:18:53.941">Evaluating 'Channel Busy ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:18:53.941">Comparing as boolean values</msg>
<status endtime="20160907 17:18:53.957" starttime="20160907 17:18:53.941" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:18:53.957">Requirement check on 'Channel Busy ${region} [True] = True' after 3 seconds</msg>
<status endtime="20160907 17:18:53.957" starttime="20160907 17:18:50.684" status="PASS"></status>
</kw>
<status endtime="20160907 17:18:53.957" starttime="20160907 17:18:32.586" status="PASS"></status>
</kw>
<kw type="foritem" name="${channel} = 2">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:18:54.004">${region} = R[12,142 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:18:54.004" starttime="20160907 17:18:53.957" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Stop Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:19:02.199">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160907 17:19:02.199" starttime="20160907 17:18:54.004" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Stopped</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:19:02.215">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Stopped">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:19:05.601">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:19:05.616" starttime="20160907 17:19:02.230" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:19:05.616">'Channel Stopped ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:19:05.616">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:19:05.616">Evaluating 'Channel Stopped ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:19:05.616">Comparing as boolean values</msg>
<status endtime="20160907 17:19:05.632" starttime="20160907 17:19:05.616" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:19:05.632">Requirement check on 'Channel Stopped ${region} [True] = True' after 3 seconds</msg>
<status endtime="20160907 17:19:05.632" starttime="20160907 17:19:02.215" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Start Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:19:10.825">Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160907 17:19:10.825" starttime="20160907 17:19:05.632" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Busy</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:19:10.841">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Busy">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:19:13.927">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:19:13.927" starttime="20160907 17:19:10.856" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:19:13.927">'Channel Busy ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:19:13.927">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:19:13.927">Evaluating 'Channel Busy ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:19:13.943">Comparing as boolean values</msg>
<status endtime="20160907 17:19:13.943" starttime="20160907 17:19:13.943" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:19:13.943">Requirement check on 'Channel Busy ${region} [True] = True' after 3 seconds</msg>
<status endtime="20160907 17:19:13.943" starttime="20160907 17:19:10.825" status="PASS"></status>
</kw>
<status endtime="20160907 17:19:13.943" starttime="20160907 17:18:53.957" status="PASS"></status>
</kw>
<kw type="foritem" name="${channel} = 3">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:19:14.005">${region} = R[12,208 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:19:13.989" starttime="20160907 17:19:13.958" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Stop Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:19:22.192">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160907 17:19:22.192" starttime="20160907 17:19:14.005" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Stopped</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:19:22.207">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Stopped">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:19:25.326">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:19:25.326" starttime="20160907 17:19:22.223" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:19:25.326">'Channel Stopped ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:19:25.341">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:19:25.341">Evaluating 'Channel Stopped ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:19:25.341">Comparing as boolean values</msg>
<status endtime="20160907 17:19:25.341" starttime="20160907 17:19:25.341" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:19:25.341">Requirement check on 'Channel Stopped ${region} [True] = True' after 3 seconds</msg>
<status endtime="20160907 17:19:25.357" starttime="20160907 17:19:22.192" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Start Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:19:30.488">Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160907 17:19:30.488" starttime="20160907 17:19:25.357" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Busy</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:19:30.503">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Busy">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:19:33.590">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:19:33.590" starttime="20160907 17:19:30.519" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:19:33.590">'Channel Busy ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:19:33.590">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:19:33.590">Evaluating 'Channel Busy ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:19:33.606">Comparing as boolean values</msg>
<status endtime="20160907 17:19:33.606" starttime="20160907 17:19:33.606" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:19:33.606">Requirement check on 'Channel Busy ${region} [True] = True' after 3 seconds</msg>
<status endtime="20160907 17:19:33.606" starttime="20160907 17:19:30.488" status="PASS"></status>
</kw>
<status endtime="20160907 17:19:33.606" starttime="20160907 17:19:13.958" status="PASS"></status>
</kw>
<kw type="foritem" name="${channel} = 4">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:19:33.652">${region} = R[12,274 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:19:33.652" starttime="20160907 17:19:33.621" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Stop Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:19:42.078">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160907 17:19:42.078" starttime="20160907 17:19:33.652" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Stopped</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:19:42.094">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Stopped">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:19:45.399">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:19:45.399" starttime="20160907 17:19:42.109" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:19:45.399">'Channel Stopped ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:19:45.399">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:19:45.399">Evaluating 'Channel Stopped ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:19:45.415">Comparing as boolean values</msg>
<status endtime="20160907 17:19:45.415" starttime="20160907 17:19:45.415" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:19:45.415">Requirement check on 'Channel Stopped ${region} [True] = True' after 3 seconds</msg>
<status endtime="20160907 17:19:45.415" starttime="20160907 17:19:42.078" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Start Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:19:50.591">Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160907 17:19:50.591" starttime="20160907 17:19:45.430" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Busy</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:19:50.607">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Busy">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:19:53.693">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:19:53.693" starttime="20160907 17:19:50.622" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:19:53.693">'Channel Busy ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:19:53.693">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:19:53.693">Evaluating 'Channel Busy ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:19:53.709">Comparing as boolean values</msg>
<status endtime="20160907 17:19:53.709" starttime="20160907 17:19:53.709" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:19:53.709">Requirement check on 'Channel Busy ${region} [True] = True' after 3 seconds</msg>
<status endtime="20160907 17:19:53.709" starttime="20160907 17:19:50.591" status="PASS"></status>
</kw>
<status endtime="20160907 17:19:53.709" starttime="20160907 17:19:33.621" status="PASS"></status>
</kw>
<status endtime="20160907 17:19:53.709" starttime="20160907 17:18:32.570" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>D-08055: Streaming error reported when stopping a channel and AFP streaming is enabled</tag>
<tag>known_issue</tag>
<tag>matrox</tag>
<tag>osprey</tag>
<tag>ospreyWithoutAudio</tag>
</tags>
<status critical="yes" endtime="20160907 17:19:53.724" starttime="20160907 17:18:18.992" status="PASS"></status>
</test>
<test name="Stop All Channels when All Channels Busy" id="s1-s1-s1-s2-t2">
<kw type="setup" name="ChannelRegion.Confirm All Errors">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:20:06.429">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:20:06.460" starttime="20160907 17:19:53.740" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>All Channels Busy</arg>
</arguments>
<kw type="kw" name="ChannelRegion.All Channels Busy">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:20:18.934">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:20:18.950" starttime="20160907 17:20:06.460" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:20:18.950">'All Channels Busy' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:20:18.950">Precondition check on 'All Channels Busy [True]'</msg>
<msg level="INFO" timestamp="20160907 17:20:18.950">All Channels Busy</msg>
<status endtime="20160907 17:20:18.950" starttime="20160907 17:20:06.460" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Stop All Channels">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:20:22.569">Warning pop-up Window found</msg>
<status endtime="20160907 17:20:22.569" starttime="20160907 17:20:18.950" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm All Errors">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:20:35.009">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:20:35.040" starttime="20160907 17:20:22.569" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>All Channels Stopped</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:20:35.040">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.All Channels Stopped">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:20:47.607">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:20:47.607" starttime="20160907 17:20:35.056" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:20:47.607">'All Channels Stopped' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:20:47.607">Requirement check on 'All Channels Stopped [True]' after 12 seconds</msg>
<msg level="INFO" timestamp="20160907 17:20:47.623">All Channels Stopped</msg>
<status endtime="20160907 17:20:47.623" starttime="20160907 17:20:35.040" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Start All Channels">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:20:50.805">Warning pop-up Window found</msg>
<status endtime="20160907 17:20:50.805" starttime="20160907 17:20:47.623" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>All Channels Busy</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:20:50.805">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.All Channels Busy">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:21:03.346">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:21:03.361" starttime="20160907 17:20:50.821" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:21:03.361">'All Channels Busy' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:21:03.361">Requirement check on 'All Channels Busy [True]' after 12 seconds</msg>
<msg level="INFO" timestamp="20160907 17:21:03.361">All Channels Busy</msg>
<status endtime="20160907 17:21:03.361" starttime="20160907 17:20:50.805" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>D-08055: Streaming error reported when stopping a channel and AFP streaming is enabled</tag>
<tag>known_issue</tag>
<tag>matrox</tag>
<tag>osprey</tag>
<tag>ospreyWithoutAudio</tag>
</tags>
<status critical="yes" endtime="20160907 17:21:03.361" starttime="20160907 17:19:53.724" status="PASS"></status>
</test>
<test name="Stop All Channels when Some Channels Busy" id="s1-s1-s1-s2-t3">
<kw type="setup" name="ChannelRegion.Confirm All Errors">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:21:16.067">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:21:16.082" starttime="20160907 17:21:03.393" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>All Channels Busy</arg>
</arguments>
<kw type="kw" name="ChannelRegion.All Channels Busy">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:21:28.571">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:21:28.587" starttime="20160907 17:21:16.082" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:21:28.587">'All Channels Busy' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:21:28.587">Precondition check on 'All Channels Busy [True]'</msg>
<msg level="INFO" timestamp="20160907 17:21:28.587">All Channels Busy</msg>
<status endtime="20160907 17:21:28.587" starttime="20160907 17:21:16.082" status="PASS"></status>
</kw>
<kw type="kw" name="${region} = shared_keywords.Region For Channel 2">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:21:28.633">${region} = R[12,142 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:21:28.633" starttime="20160907 17:21:28.602" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:21:31.884">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:21:31.915" starttime="20160907 17:21:28.649" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:21:31.915">${region} = R[12,142 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:21:31.915" starttime="20160907 17:21:28.602" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Stop Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:21:41.176">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160907 17:21:41.176" starttime="20160907 17:21:31.915" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:21:44.232">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:21:44.263" starttime="20160907 17:21:41.176" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Stopped</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:21:44.263">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Stopped">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:21:47.380">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:21:47.396" starttime="20160907 17:21:44.278" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:21:47.396">'Channel Stopped ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:21:47.396">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:21:47.396">Evaluating 'Channel Stopped ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:21:47.396">Comparing as boolean values</msg>
<status endtime="20160907 17:21:47.411" starttime="20160907 17:21:47.396" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:21:47.411">Requirement check on 'Channel Stopped ${region} [True] = True' after 3 seconds</msg>
<msg level="INFO" timestamp="20160907 17:21:47.411">Channel Stopped, ${region}
        =, True, True</msg>
<status endtime="20160907 17:21:47.411" starttime="20160907 17:21:44.263" status="PASS"></status>
</kw>
<kw type="kw" name="${region} = shared_keywords.Region For Channel 4">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:21:47.458">${region} = R[12,274 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:21:47.458" starttime="20160907 17:21:47.411" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:21:50.498">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:21:50.529" starttime="20160907 17:21:47.458" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:21:50.529">${region} = R[12,274 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:21:50.529" starttime="20160907 17:21:47.411" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Stop Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:21:58.232">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160907 17:21:58.232" starttime="20160907 17:21:50.529" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:22:01.319">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:22:01.334" starttime="20160907 17:21:58.232" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Stopped</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:22:01.334">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Stopped">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:22:04.453">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:22:04.453" starttime="20160907 17:22:01.350" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:22:04.453">'Channel Stopped ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:22:04.453">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:22:04.453">Evaluating 'Channel Stopped ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:22:04.468">Comparing as boolean values</msg>
<status endtime="20160907 17:22:04.468" starttime="20160907 17:22:04.468" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:22:04.468">Requirement check on 'Channel Stopped ${region} [True] = True' after 3 seconds</msg>
<msg level="INFO" timestamp="20160907 17:22:04.468">Channel Stopped, ${region}
        =, True, True</msg>
<status endtime="20160907 17:22:04.468" starttime="20160907 17:22:01.334" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Stop All Channels">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:22:07.245">Warning pop-up Window found</msg>
<status endtime="20160907 17:22:07.245" starttime="20160907 17:22:04.484" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm All Errors">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:22:19.640">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:22:19.671" starttime="20160907 17:22:07.245" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>All Channels Stopped</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:22:19.671">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.All Channels Stopped">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:22:32.219">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:22:32.219" starttime="20160907 17:22:19.687" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:22:32.219">'All Channels Stopped' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:22:32.219">Requirement check on 'All Channels Stopped [True]' after 12 seconds</msg>
<msg level="INFO" timestamp="20160907 17:22:32.235">All Channels Stopped</msg>
<status endtime="20160907 17:22:32.235" starttime="20160907 17:22:19.671" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Start All Channels">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:22:35.136">Warning pop-up Window found</msg>
<status endtime="20160907 17:22:35.136" starttime="20160907 17:22:32.235" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>All Channels Busy</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:22:35.152">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.All Channels Busy">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:22:47.777">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:22:47.792" starttime="20160907 17:22:35.152" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:22:47.792">'All Channels Busy' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:22:47.792">Requirement check on 'All Channels Busy [True]' after 12 seconds</msg>
<msg level="INFO" timestamp="20160907 17:22:47.792">All Channels Busy</msg>
<status endtime="20160907 17:22:47.792" starttime="20160907 17:22:35.136" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>D-08055: Streaming error reported when stopping a channel and AFP streaming is enabled</tag>
<tag>known_issue</tag>
<tag>matrox</tag>
<tag>osprey</tag>
<tag>ospreyWithoutAudio</tag>
</tags>
<status critical="yes" endtime="20160907 17:22:47.808" starttime="20160907 17:21:03.377" status="PASS"></status>
</test>
<test name="Start All Channels when Some Channels Stopped" id="s1-s1-s1-s2-t4">
<kw type="setup" name="ChannelRegion.Confirm All Errors">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:23:00.392">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:23:00.407" starttime="20160907 17:22:47.824" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>All Channels Busy</arg>
</arguments>
<kw type="kw" name="ChannelRegion.All Channels Busy">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:23:12.879">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:23:12.895" starttime="20160907 17:23:00.423" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:23:12.895">'All Channels Busy' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:23:12.895">Precondition check on 'All Channels Busy [True]'</msg>
<msg level="INFO" timestamp="20160907 17:23:12.895">All Channels Busy</msg>
<status endtime="20160907 17:23:12.895" starttime="20160907 17:23:00.407" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Stop All Channels">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:23:15.703">Warning pop-up Window found</msg>
<status endtime="20160907 17:23:15.703" starttime="20160907 17:23:12.911" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm All Errors">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:23:28.098">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:23:28.129" starttime="20160907 17:23:15.703" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>All Channels Stopped</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:23:28.145">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.All Channels Stopped">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:23:40.696">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:23:40.696" starttime="20160907 17:23:28.145" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:23:40.696">'All Channels Stopped' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:23:40.696">Requirement check on 'All Channels Stopped [True]' after 12 seconds</msg>
<msg level="INFO" timestamp="20160907 17:23:40.711">All Channels Stopped</msg>
<status endtime="20160907 17:23:40.711" starttime="20160907 17:23:28.129" status="PASS"></status>
</kw>
<kw type="kw" name="${region} = shared_keywords.Region For Channel 2">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:23:40.774">${region} = R[12,142 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:23:40.758" starttime="20160907 17:23:40.727" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:23:43.814">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:23:43.845" starttime="20160907 17:23:40.774" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:23:43.845">${region} = R[12,142 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:23:43.845" starttime="20160907 17:23:40.711" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Start Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:23:49.708">Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160907 17:23:49.708" starttime="20160907 17:23:43.845" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Busy</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:23:49.724">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Busy">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:23:52.810">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:23:52.826" starttime="20160907 17:23:49.739" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:23:52.826">'Channel Busy ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:23:52.826">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:23:52.826">Evaluating 'Channel Busy ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:23:52.841">Comparing as boolean values</msg>
<status endtime="20160907 17:23:52.841" starttime="20160907 17:23:52.841" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:23:52.841">Requirement check on 'Channel Busy ${region} [True] = True' after 3 seconds</msg>
<msg level="INFO" timestamp="20160907 17:23:52.841">Channel Busy, ${region}
        =, True, True</msg>
<status endtime="20160907 17:23:52.841" starttime="20160907 17:23:49.708" status="PASS"></status>
</kw>
<kw type="kw" name="${region} = shared_keywords.Region For Channel 3">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:23:52.904">${region} = R[12,208 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:23:52.904" starttime="20160907 17:23:52.857" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:23:55.975">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:23:55.990" starttime="20160907 17:23:52.904" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:23:55.990">${region} = R[12,208 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:23:55.990" starttime="20160907 17:23:52.857" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Start Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:24:00.684">Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160907 17:24:00.684" starttime="20160907 17:23:56.006" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Busy</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:24:00.700">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Busy">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:24:03.786">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:24:03.802" starttime="20160907 17:24:00.715" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:24:03.802">'Channel Busy ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:24:03.802">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:24:03.802">Evaluating 'Channel Busy ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:24:03.802">Comparing as boolean values</msg>
<status endtime="20160907 17:24:03.817" starttime="20160907 17:24:03.802" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:24:03.817">Requirement check on 'Channel Busy ${region} [True] = True' after 3 seconds</msg>
<msg level="INFO" timestamp="20160907 17:24:03.817">Channel Busy, ${region}
        =, True, True</msg>
<status endtime="20160907 17:24:03.817" starttime="20160907 17:24:00.684" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Start All Channels">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:24:06.594">Warning pop-up Window found</msg>
<status endtime="20160907 17:24:06.594" starttime="20160907 17:24:03.817" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>All Channels Busy</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:24:06.610">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.All Channels Busy">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:24:19.285">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:24:19.301" starttime="20160907 17:24:06.610" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:24:19.301">'All Channels Busy' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:24:19.301">Requirement check on 'All Channels Busy [True]' after 12 seconds</msg>
<msg level="INFO" timestamp="20160907 17:24:19.301">All Channels Busy</msg>
<status endtime="20160907 17:24:19.301" starttime="20160907 17:24:06.594" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>D-08055: Streaming error reported when stopping a channel and AFP streaming is enabled</tag>
<tag>known_issue</tag>
<tag>matrox</tag>
<tag>osprey</tag>
<tag>ospreyWithoutAudio</tag>
</tags>
<status critical="yes" endtime="20160907 17:24:19.301" starttime="20160907 17:22:47.808" status="PASS"></status>
</test>
<test name="Start a Channel with OperationMode Idle" id="s1-s1-s1-s2-t5">
<kw type="setup" name="ChannelRegion.Confirm All Errors">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:24:32.101">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:24:32.117" starttime="20160907 17:24:19.332" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Replace Configuration File">
<doc></doc>
<arguments>
<arg>${Configuration_Channel_1_Idle}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:24:36.875">[log] CLICK on L(17,29)@S(0)[0,0 1460x963]
[log] CLICK on L(122,116)@S(0)[0,0 1460x963]
[log] CLICK on L(781,525)@S(0)[0,0 1460x963]</msg>
<status endtime="20160907 17:24:36.875" starttime="20160907 17:24:32.133" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:24:51.891">Slept 15 seconds</msg>
<status endtime="20160907 17:24:51.922" starttime="20160907 17:24:36.875" status="PASS"></status>
</kw>
<status endtime="20160907 17:24:51.922" starttime="20160907 17:24:32.133" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy Configuration File">
<doc>Robot keyword: Replace Configuration File in installation folder with Configuration from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:24:51.922">SourceFile:  C:\PCDetector_Testing\Testing\Resources\ConfigurationFiles\TTX_WatercastProp_OperationModeIdle1.cfg
DestinationFile:  F:\civolution\Cfg\TTX_WatercastProp.cfg
FileExists value:  True</msg>
<status endtime="20160907 17:24:51.938" starttime="20160907 17:24:51.922" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:25:06.953">Slept 15 seconds</msg>
<status endtime="20160907 17:25:06.985" starttime="20160907 17:24:51.953" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160907 17:25:07.016" starttime="20160907 17:25:06.985" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:25:22.016">Slept 15 seconds</msg>
<status endtime="20160907 17:25:22.047" starttime="20160907 17:25:07.016" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:25:55.806">License warning not found, no need to make it disappear</msg>
<status endtime="20160907 17:25:55.806" starttime="20160907 17:25:22.047" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:26:10.821">Slept 15 seconds</msg>
<status endtime="20160907 17:26:10.853" starttime="20160907 17:25:55.806" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:26:12.818">[log] CLICK on L(258,165)@S(0)[0,0 1460x963]
[log] CLICK on L(1125,166)@S(0)[0,0 1460x963]</msg>
<status endtime="20160907 17:26:12.818" starttime="20160907 17:26:10.853" status="PASS"></status>
</kw>
<status endtime="20160907 17:26:12.818" starttime="20160907 17:25:22.047" status="PASS"></status>
</kw>
<status endtime="20160907 17:26:12.818" starttime="20160907 17:24:51.938" status="PASS"></status>
</kw>
<status endtime="20160907 17:26:12.834" starttime="20160907 17:24:32.117" status="PASS"></status>
</kw>
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:26:12.881">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:26:12.881" starttime="20160907 17:26:12.849" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:26:16.085">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:26:16.116" starttime="20160907 17:26:12.896" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:26:16.116">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:26:16.116" starttime="20160907 17:26:12.834" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Stopped</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelRegion.Channel Stopped">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:26:19.285">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:26:19.285" starttime="20160907 17:26:16.148" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:26:19.300">'Channel Stopped ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:26:19.300">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:26:19.300">Evaluating 'Channel Stopped ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:26:19.316">Comparing as boolean values</msg>
<status endtime="20160907 17:26:19.316" starttime="20160907 17:26:19.300" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:26:19.316">Requirement check on 'Channel Stopped ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:26:19.316">Channel Stopped, ${region}
        =, True, True</msg>
<status endtime="20160907 17:26:19.316" starttime="20160907 17:26:16.116" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Start Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:26:25.371">Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160907 17:26:25.371" starttime="20160907 17:26:19.316" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Busy</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelRegion.Channel Busy">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:26:28.489">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:26:28.489" starttime="20160907 17:26:25.402" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:26:28.489">'Channel Busy ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:26:28.489">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:26:28.489">Evaluating 'Channel Busy ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:26:28.504">Comparing as boolean values</msg>
<status endtime="20160907 17:26:28.504" starttime="20160907 17:26:28.504" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:26:28.504">Requirement check on 'Channel Busy ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:26:28.504">Channel Busy, ${region}
        =, True, True</msg>
<status endtime="20160907 17:26:28.504" starttime="20160907 17:26:25.371" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Replace Configuration File">
<doc></doc>
<arguments>
<arg>${Configuration_All_Streaming_Active}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:26:32.155">[log] CLICK on L(17,29)@S(0)[0,0 1460x963]
[log] CLICK on L(122,116)@S(0)[0,0 1460x963]
[log] CLICK on L(781,525)@S(0)[0,0 1460x963]</msg>
<status endtime="20160907 17:26:32.155" starttime="20160907 17:26:28.535" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:26:47.162">Slept 15 seconds</msg>
<status endtime="20160907 17:26:47.162" starttime="20160907 17:26:32.155" status="PASS"></status>
</kw>
<status endtime="20160907 17:26:47.162" starttime="20160907 17:26:28.520" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy Configuration File">
<doc>Robot keyword: Replace Configuration File in installation folder with Configuration from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:26:47.162">SourceFile:  C:\PCDetector_Testing\Testing\Resources\ConfigurationFiles\TTX_WatercastProp_AllStreaming1234.cfg
DestinationFile:  F:\civolution\Cfg\TTX_WatercastProp.cfg
FileExists value:  True</msg>
<status endtime="20160907 17:26:47.177" starttime="20160907 17:26:47.162" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:27:02.193">Slept 15 seconds</msg>
<status endtime="20160907 17:27:02.224" starttime="20160907 17:26:47.177" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160907 17:27:02.240" starttime="20160907 17:27:02.224" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:27:17.240">Slept 15 seconds</msg>
<status endtime="20160907 17:27:17.271" starttime="20160907 17:27:02.240" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:27:50.827">License warning not found, no need to make it disappear</msg>
<status endtime="20160907 17:27:50.827" starttime="20160907 17:27:17.271" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:28:05.850">Slept 15 seconds</msg>
<status endtime="20160907 17:28:05.850" starttime="20160907 17:27:50.827" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:28:07.987">[log] CLICK on L(302,209)@S(0)[0,0 1460x963]
[log] CLICK on L(1169,210)@S(0)[0,0 1460x963]</msg>
<status endtime="20160907 17:28:07.987" starttime="20160907 17:28:05.850" status="PASS"></status>
</kw>
<status endtime="20160907 17:28:07.987" starttime="20160907 17:27:17.271" status="PASS"></status>
</kw>
<status endtime="20160907 17:28:07.987" starttime="20160907 17:26:47.177" status="PASS"></status>
</kw>
<status endtime="20160907 17:28:08.003" starttime="20160907 17:26:28.520" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
<tag>osprey</tag>
<tag>ospreyWithoutAudio</tag>
</tags>
<status critical="yes" endtime="20160907 17:28:08.003" starttime="20160907 17:24:19.316" status="PASS"></status>
</test>
<doc></doc>
<metadata>
</metadata>
<status endtime="20160907 17:28:08.018" starttime="20160907 17:18:18.836" status="PASS"></status>
</suite>
<suite source="C:\PCDetector_Testing\Testing\Robot\Tests\10__Functional_Tests\02__Enable_and_Disable_Features.txt" name="Enable and Disable Features" id="s1-s1-s1-s3">
<kw type="setup" name="shared_keywords.Set Ceco Length">
<doc></doc>
<arguments>
<arg>${2Minutes}</arg>
</arguments>
<kw type="kw" name="${RestartRequired} = PCDetector.Set Ceco Length And Stop Application">
<doc></doc>
<arguments>
<arg>${CecoLength}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:28:14.745">Before checking the ceco
Scores 15_min_ceco=0.955177128315 and 2_min_ceco=0.911807954311 
Before finding settings area
Before finding settings input area
Before finding Dailog Button
Warning pop-up Window found</msg>
<msg level="INFO" timestamp="20160907 17:28:14.745">${RestartRequired} = True</msg>
<status endtime="20160907 17:28:14.745" starttime="20160907 17:28:08.299" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${RestartRequired}</arg>
<arg>Start PC Detector Application After 15 Seconds</arg>
</arguments>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:28:29.784">Slept 15 seconds</msg>
<status endtime="20160907 17:28:29.784" starttime="20160907 17:28:14.777" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160907 17:28:29.784" starttime="20160907 17:28:29.784" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:28:44.813">Slept 15 seconds</msg>
<status endtime="20160907 17:28:44.829" starttime="20160907 17:28:29.799" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:29:18.743">License warning not found, no need to make it disappear</msg>
<status endtime="20160907 17:29:18.743" starttime="20160907 17:28:44.829" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:29:33.759">Slept 15 seconds</msg>
<status endtime="20160907 17:29:33.790" starttime="20160907 17:29:18.743" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:29:35.803">[log] CLICK on L(148,55)@S(0)[0,0 1460x963]
[log] CLICK on L(1015,56)@S(0)[0,0 1460x963]</msg>
<status endtime="20160907 17:29:35.803" starttime="20160907 17:29:33.790" status="PASS"></status>
</kw>
<status endtime="20160907 17:29:35.803" starttime="20160907 17:28:44.829" status="PASS"></status>
</kw>
<status endtime="20160907 17:29:35.818" starttime="20160907 17:28:14.761" status="PASS"></status>
</kw>
<status endtime="20160907 17:29:35.818" starttime="20160907 17:28:14.761" status="PASS"></status>
</kw>
<status endtime="20160907 17:29:35.818" starttime="20160907 17:28:08.299" status="PASS"></status>
</kw>
<test name="Enable Watermarking Feature Channel 1" id="s1-s1-s1-s3-t1">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:29:35.881">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:29:35.881" starttime="20160907 17:29:35.834" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:29:38.936">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:29:38.967" starttime="20160907 17:29:35.896" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:29:38.967">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:29:38.967" starttime="20160907 17:29:35.834" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is watermarking enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Watermarking Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:29:39.014" starttime="20160907 17:29:38.983" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:29:39.014">'is watermarking enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:29:39.014">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:29:39.014">Evaluating 'is watermarking enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:29:39.030">Comparing as boolean values</msg>
<status endtime="20160907 17:29:39.030" starttime="20160907 17:29:39.014" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:29:39.030">Precondition check on 'is watermarking enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:29:39.030">Is Watermarking Enabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:29:39.030" starttime="20160907 17:29:38.967" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Disable Watermarking">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:29:41.822">Warning pop-up Window found</msg>
<status endtime="20160907 17:29:41.822" starttime="20160907 17:29:39.045" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is watermarking disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:29:41.838">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Watermarking Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:29:41.869" starttime="20160907 17:29:41.838" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:29:41.869">'is watermarking disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:29:41.885">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:29:41.885">Evaluating 'is watermarking disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:29:41.885">Comparing as boolean values</msg>
<status endtime="20160907 17:29:41.885" starttime="20160907 17:29:41.885" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:29:41.885">Requirement check on 'is watermarking disabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160907 17:29:41.885">Is Watermarking Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:29:41.900" starttime="20160907 17:29:41.822" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Watermarking">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:29:43.460">Warning pop-up Window found</msg>
<status endtime="20160907 17:29:43.460" starttime="20160907 17:29:41.900" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is watermarking enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:29:43.476">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Watermarking Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:29:43.507" starttime="20160907 17:29:43.491" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:29:43.507">'is watermarking enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:29:43.507">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:29:43.507">Evaluating 'is watermarking enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:29:43.523">Comparing as boolean values</msg>
<status endtime="20160907 17:29:43.523" starttime="20160907 17:29:43.523" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:29:43.523">Requirement check on 'is watermarking enabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160907 17:29:43.523">Is Watermarking Enabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:29:43.523" starttime="20160907 17:29:43.460" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
<tag>osprey</tag>
<tag>ospreyWithoutAudio</tag>
</tags>
<status critical="yes" endtime="20160907 17:29:43.523" starttime="20160907 17:29:35.818" status="PASS"></status>
</test>
<test name="Disable VFP CECO Feature When AFP CECO is NOT Available Channel 1" id="s1-s1-s1-s3-t2">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:29:43.585">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:29:43.585" starttime="20160907 17:29:43.554" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:29:46.641">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:29:46.672" starttime="20160907 17:29:43.601" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:29:46.672">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:29:46.672" starttime="20160907 17:29:43.538" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:29:46.719" starttime="20160907 17:29:46.703" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:29:46.719">'is vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:29:46.719">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:29:46.735">Evaluating 'is vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:29:46.735">Comparing as boolean values</msg>
<status endtime="20160907 17:29:46.735" starttime="20160907 17:29:46.735" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:29:46.750">Precondition check on 'is vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:29:46.750">Is Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:29:46.750" starttime="20160907 17:29:46.688" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:29:46.797" starttime="20160907 17:29:46.766" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:29:46.797">'is afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:29:46.813">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:29:46.813">Evaluating 'is afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:29:46.813">Comparing as boolean values</msg>
<status endtime="20160907 17:29:46.813" starttime="20160907 17:29:46.813" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:29:46.813">Precondition check on 'is afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:29:46.813">Is Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:29:46.813" starttime="20160907 17:29:46.750" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Disable Vfp Ceco">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:29:48.388">Warning pop-up Window found</msg>
<status endtime="20160907 17:29:48.388" starttime="20160907 17:29:46.828" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is vfp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:29:48.388">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:29:48.435" starttime="20160907 17:29:48.404" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:29:48.435">'is vfp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:29:48.435">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:29:48.435">Evaluating 'is vfp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:29:48.451">Comparing as boolean values</msg>
<status endtime="20160907 17:29:48.451" starttime="20160907 17:29:48.451" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:29:48.451">Requirement check on 'is vfp disabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160907 17:29:48.451">Is Vfp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:29:48.451" starttime="20160907 17:29:48.388" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfCecoFiles} = shared_keywords.Generated Ceco Files For Channel 1 After 120 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:31:48.466">Slept 2 minutes</msg>
<status endtime="20160907 17:31:48.497" starttime="20160907 17:29:48.466" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:31:49.620">Latest Ceco file:  F:\civolution\Data\WcD07681609071528_01.ce</msg>
<msg level="INFO" timestamp="20160907 17:31:49.620">${NrOfFiles} = 569</msg>
<status endtime="20160907 17:31:49.620" starttime="20160907 17:31:48.497" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:31:49.620">${NrOfCecoFiles} = 569</msg>
<status endtime="20160907 17:31:49.620" starttime="20160907 17:29:48.466" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Generated Ceco Files For Channel</arg>
<arg>1</arg>
<arg>=</arg>
<arg>${NrOfCecoFiles}</arg>
<arg>within</arg>
<arg>300 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:31:49.636">Interpreting '300 sec' as fixed value</msg>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:31:50.899">Latest Ceco file:  F:\civolution\Data\WcD07681609071528_01.ce</msg>
<status endtime="20160907 17:31:50.899" starttime="20160907 17:31:49.651" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:31:50.915">'Generated Ceco Files For Channel 1' is '569'</msg>
<msg level="INFO" timestamp="20160907 17:31:50.915">Interpreting '${NrOfCecoFiles}' as fixed value '569'</msg>
<msg level="INFO" timestamp="20160907 17:31:50.915">Evaluating 'Generated Ceco Files For Channel 1 [569]' = '${NrOfCecoFiles} [569]'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>569</arg>
<arg>569</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:31:50.915">Comparing evaluated keyword values</msg>
<status endtime="20160907 17:31:50.930" starttime="20160907 17:31:50.915" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:31:50.930">Requirement check on 'Generated Ceco Files For Channel 1 [569] = ${NrOfCecoFiles} [569]' after 1 seconds</msg>
<msg level="INFO" timestamp="20160907 17:31:50.930">Generated CecoFiles For Channel, 1
        =, 569, 569</msg>
<status endtime="20160907 17:31:50.930" starttime="20160907 17:31:49.636" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
<tag>ospreyWithoutAudio</tag>
</tags>
<status critical="yes" endtime="20160907 17:31:50.930" starttime="20160907 17:29:43.538" status="PASS"></status>
</test>
<test name="Enable VFP CECO Feature When AFP CECO is NOT Available Channel 1" id="s1-s1-s1-s3-t3">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:31:50.993">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:31:50.993" starttime="20160907 17:31:50.962" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:31:54.048">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:31:54.080" starttime="20160907 17:31:50.993" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:31:54.080">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:31:54.080" starttime="20160907 17:31:50.946" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is vfp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:31:54.126" starttime="20160907 17:31:54.095" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:31:54.126">'is vfp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:31:54.126">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:31:54.126">Evaluating 'is vfp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:31:54.126">Comparing as boolean values</msg>
<status endtime="20160907 17:31:54.142" starttime="20160907 17:31:54.126" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:31:54.142">Precondition check on 'is vfp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:31:54.142">Is Vfp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:31:54.142" starttime="20160907 17:31:54.080" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:31:54.189" starttime="20160907 17:31:54.158" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:31:54.189">'is afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:31:54.189">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:31:54.189">Evaluating 'is afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:31:54.204">Comparing as boolean values</msg>
<status endtime="20160907 17:31:54.204" starttime="20160907 17:31:54.189" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:31:54.204">Precondition check on 'is afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:31:54.204">Is Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:31:54.204" starttime="20160907 17:31:54.142" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Vfp Ceco">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:31:55.796">Warning pop-up Window found</msg>
<status endtime="20160907 17:31:55.796" starttime="20160907 17:31:54.204" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:31:55.796">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:31:55.842" starttime="20160907 17:31:55.811" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:31:55.842">'is vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:31:55.842">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:31:55.842">Evaluating 'is vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:31:55.858">Comparing as boolean values</msg>
<status endtime="20160907 17:31:55.858" starttime="20160907 17:31:55.858" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:31:55.858">Requirement check on 'is vfp enabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160907 17:31:55.858">Is Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:31:55.858" starttime="20160907 17:31:55.796" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Generated Ceco Files For Channel</arg>
<arg>1</arg>
<arg>&gt;</arg>
<arg>${NrOfCecoFiles}</arg>
<arg>within</arg>
<arg>300 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:31:55.874">Interpreting '300 sec' as fixed value</msg>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:31:56.888">Latest Ceco file:  F:\civolution\Data\WcD07681609071528_01.ce</msg>
<status endtime="20160907 17:31:56.888" starttime="20160907 17:31:55.889" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:31:56.903">'Generated Ceco Files For Channel 1' is '569'</msg>
<msg level="INFO" timestamp="20160907 17:31:56.903">Generated CecoFiles For Channel, 1</msg>
<msg level="FAIL" timestamp="20160907 17:31:56.903">Non-existing variable '${NrOfCecoFiles}'.</msg>
<msg level="INFO" timestamp="20160907 17:31:56.903">Saving screenshot Enable and Disable Features-Enable VFP CECO Feature When AFP CECO is NOT Available Channel 1-generated cecofiles for channel_20160907-17h31m56.903.png</msg>
<msg level="INFO" html="yes" timestamp="20160907 17:31:57.231">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="Enable and Disable Features-Enable VFP CECO Feature When AFP CECO is NOT Available Channel 1-generated cecofiles for channel_20160907-17h31m56.903.png"&gt;&lt;img src="Enable and Disable Features-Enable VFP CECO Feature When AFP CECO is NOT Available Channel 1-generated cecofiles for channel_20160907-17h31m56.903.png" width="800px"&gt;&lt;/a&gt;</msg>
<status endtime="20160907 17:31:56.903" starttime="20160907 17:31:55.858" status="FAIL"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
<tag>ospreyWithoutAudio</tag>
</tags>
<status critical="yes" endtime="20160907 17:31:57.231" starttime="20160907 17:31:50.946" status="FAIL">Non-existing variable '${NrOfCecoFiles}'.</status>
</test>
<test name="Disable Thumbnail Capturing Feature Channel 1" id="s1-s1-s1-s3-t4">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:31:57.293">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:31:57.293" starttime="20160907 17:31:57.246" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:32:00.373">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:32:00.404" starttime="20160907 17:31:57.293" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:32:00.404">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:32:00.404" starttime="20160907 17:31:57.246" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is thumbnail enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Thumbnail Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:32:00.451" starttime="20160907 17:32:00.420" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:32:00.451">'is thumbnail enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:32:00.451">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:32:00.466">Evaluating 'is thumbnail enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:32:00.466">Comparing as boolean values</msg>
<status endtime="20160907 17:32:00.466" starttime="20160907 17:32:00.466" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:32:00.466">Precondition check on 'is thumbnail enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:32:00.482">Is Thumbnail Enabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:32:00.482" starttime="20160907 17:32:00.404" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Disable Thumbnail Capturing">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:32:02.073">Warning pop-up Window found</msg>
<status endtime="20160907 17:32:02.073" starttime="20160907 17:32:00.482" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is thumbnail disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:32:02.073">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Thumbnail Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:32:02.120" starttime="20160907 17:32:02.089" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:32:02.120">'is thumbnail disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:32:02.136">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:32:02.136">Evaluating 'is thumbnail disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:32:02.136">Comparing as boolean values</msg>
<status endtime="20160907 17:32:02.136" starttime="20160907 17:32:02.136" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:32:02.136">Requirement check on 'is thumbnail disabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160907 17:32:02.136">Is Thumbnail Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:32:02.151" starttime="20160907 17:32:02.073" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfThumbnails} = shared_keywords.Generated Thumbnails For Channel 1 After 2 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:32:04.165">Slept 2 seconds</msg>
<status endtime="20160907 17:32:04.181" starttime="20160907 17:32:02.151" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated Thumbnails For Channel">
<doc>Robot keyword: Get Number of Generated Thumbnails for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:32:04.711">${NrOfFiles} = 7319</msg>
<status endtime="20160907 17:32:04.711" starttime="20160907 17:32:04.181" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:32:04.711">${NrOfThumbnails} = 7319</msg>
<status endtime="20160907 17:32:04.711" starttime="20160907 17:32:02.151" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Generated Thumbnails For Channel 1 After 300 Seconds</arg>
<arg>=</arg>
<arg>${NrOfThumbnails}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Generated Thumbnails For Channel 1 After 300 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:37:04.742">Slept 5 minutes</msg>
<status endtime="20160907 17:37:04.774" starttime="20160907 17:32:04.742" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated Thumbnails For Channel">
<doc>Robot keyword: Get Number of Generated Thumbnails for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:37:05.320">${NrOfFiles} = 7319</msg>
<status endtime="20160907 17:37:05.320" starttime="20160907 17:37:04.774" status="PASS"></status>
</kw>
<status endtime="20160907 17:37:05.335" starttime="20160907 17:32:04.727" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:37:05.335">'Generated Thumbnails For Channel 1 After 300 Seconds' is '7319'</msg>
<msg level="INFO" timestamp="20160907 17:37:05.335">Interpreting '${NrOfThumbnails}' as fixed value '7319'</msg>
<msg level="INFO" timestamp="20160907 17:37:05.335">Evaluating 'Generated Thumbnails For Channel 1 After 300 Seconds [7319]' = '${NrOfThumbnails} [7319]'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>7319</arg>
<arg>7319</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:37:05.351">Comparing evaluated keyword values</msg>
<status endtime="20160907 17:37:05.351" starttime="20160907 17:37:05.335" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:37:05.351">Requirement check on 'Generated Thumbnails For Channel 1 After 300 Seconds [7319] = ${NrOfThumbnails} [7319]'</msg>
<msg level="INFO" timestamp="20160907 17:37:05.351">Generated Thumbnails For Channel 1 After 300 Seconds
        =, 7319, 7319</msg>
<status endtime="20160907 17:37:05.351" starttime="20160907 17:32:04.727" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
<tag>osprey</tag>
<tag>ospreyWithoutAudio</tag>
</tags>
<status critical="yes" endtime="20160907 17:37:05.351" starttime="20160907 17:31:57.231" status="PASS"></status>
</test>
<test name="Enable Thumbnail Capturing Feature Channel 1" id="s1-s1-s1-s3-t5">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:37:05.413">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:37:05.413" starttime="20160907 17:37:05.382" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:37:08.469">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:37:08.500" starttime="20160907 17:37:05.429" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:37:08.500">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:37:08.500" starttime="20160907 17:37:05.366" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is thumbnail disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Thumbnail Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:37:08.547" starttime="20160907 17:37:08.516" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:37:08.547">'is thumbnail disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:37:08.547">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:37:08.547">Evaluating 'is thumbnail disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:37:08.562">Comparing as boolean values</msg>
<status endtime="20160907 17:37:08.562" starttime="20160907 17:37:08.547" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:37:08.562">Precondition check on 'is thumbnail disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:37:08.562">Is Thumbnail Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:37:08.562" starttime="20160907 17:37:08.500" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Thumbnail Capturing">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:37:10.154">Warning pop-up Window found</msg>
<status endtime="20160907 17:37:10.154" starttime="20160907 17:37:08.562" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is thumbnail enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:37:10.154">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Thumbnail Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:37:10.200" starttime="20160907 17:37:10.169" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:37:10.216">'is thumbnail enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:37:10.216">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:37:10.216">Evaluating 'is thumbnail enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:37:10.216">Comparing as boolean values</msg>
<status endtime="20160907 17:37:10.216" starttime="20160907 17:37:10.216" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:37:10.232">Requirement check on 'is thumbnail enabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160907 17:37:10.232">Is Thumbnail Enabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:37:10.232" starttime="20160907 17:37:10.154" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfThumbnails} = shared_keywords.Generated Thumbnails For Channel 1 After 2 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:37:12.261">Slept 2 seconds</msg>
<status endtime="20160907 17:37:12.277" starttime="20160907 17:37:10.232" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated Thumbnails For Channel">
<doc>Robot keyword: Get Number of Generated Thumbnails for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:37:12.792">${NrOfFiles} = 7320</msg>
<status endtime="20160907 17:37:12.792" starttime="20160907 17:37:12.277" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:37:12.807">${NrOfThumbnails} = 7320</msg>
<status endtime="20160907 17:37:12.807" starttime="20160907 17:37:10.232" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Generated Thumbnails For Channel 1 After 300 Seconds</arg>
<arg>&gt;</arg>
<arg>${NrOfThumbnails}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Generated Thumbnails For Channel 1 After 300 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:42:12.838">Slept 5 minutes</msg>
<status endtime="20160907 17:42:12.869" starttime="20160907 17:37:12.823" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated Thumbnails For Channel">
<doc>Robot keyword: Get Number of Generated Thumbnails for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:42:13.571">${NrOfFiles} = 7325</msg>
<status endtime="20160907 17:42:13.571" starttime="20160907 17:42:12.869" status="PASS"></status>
</kw>
<status endtime="20160907 17:42:13.587" starttime="20160907 17:37:12.823" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:42:13.587">'Generated Thumbnails For Channel 1 After 300 Seconds' is '7325'</msg>
<msg level="INFO" timestamp="20160907 17:42:13.587">Interpreting '${NrOfThumbnails}' as fixed value '7320'</msg>
<msg level="INFO" timestamp="20160907 17:42:13.587">Evaluating 'Generated Thumbnails For Channel 1 After 300 Seconds [7325]' &gt; '${NrOfThumbnails} [7320]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>7325</arg>
<arg>7320</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:42:13.587">Comparing evaluated keyword values</msg>
<status endtime="20160907 17:42:13.602" starttime="20160907 17:42:13.587" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:42:13.602">Requirement check on 'Generated Thumbnails For Channel 1 After 300 Seconds [7325] &gt; ${NrOfThumbnails} [7320]'</msg>
<msg level="INFO" timestamp="20160907 17:42:13.602">Generated Thumbnails For Channel 1 After 300 Seconds
        &gt;, 7325, 7320</msg>
<status endtime="20160907 17:42:13.602" starttime="20160907 17:37:12.807" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
<tag>osprey</tag>
<tag>ospreyWithoutAudio</tag>
</tags>
<status critical="yes" endtime="20160907 17:42:13.602" starttime="20160907 17:37:05.366" status="PASS"></status>
</test>
<test name="Enable VFP Streaming Feature Channel 1" id="s1-s1-s1-s3-t6">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:42:13.665">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:42:13.665" starttime="20160907 17:42:13.618" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:42:16.720">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:42:16.736" starttime="20160907 17:42:13.665" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:42:16.736">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:42:16.736" starttime="20160907 17:42:13.618" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:42:16.783" starttime="20160907 17:42:16.752" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:42:16.783">'is rt vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:42:16.783">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:42:16.783">Evaluating 'is rt vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:42:16.798">Comparing as boolean values</msg>
<status endtime="20160907 17:42:16.798" starttime="20160907 17:42:16.783" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:42:16.798">Precondition check on 'is rt vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:42:16.798">Is Rt Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:42:16.798" starttime="20160907 17:42:16.736" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Disable Vfp Streaming">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:42:18.390">Warning pop-up Window found</msg>
<status endtime="20160907 17:42:18.390" starttime="20160907 17:42:16.798" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is rt vfp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:42:18.390">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Vfp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:42:18.436" starttime="20160907 17:42:18.405" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:42:18.436">'is rt vfp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:42:18.452">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:42:18.452">Evaluating 'is rt vfp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:42:18.452">Comparing as boolean values</msg>
<status endtime="20160907 17:42:18.452" starttime="20160907 17:42:18.452" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:42:18.452">Requirement check on 'is rt vfp disabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160907 17:42:18.452">Is Rt Vfp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:42:18.468" starttime="20160907 17:42:18.390" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Vfp Streaming">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:42:20.043">Warning pop-up Window found</msg>
<status endtime="20160907 17:42:20.043" starttime="20160907 17:42:18.468" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is rt vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:42:20.043">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:42:20.074" starttime="20160907 17:42:20.059" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:42:20.090">'is rt vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:42:20.090">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:42:20.090">Evaluating 'is rt vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:42:20.090">Comparing as boolean values</msg>
<status endtime="20160907 17:42:20.090" starttime="20160907 17:42:20.090" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:42:20.090">Requirement check on 'is rt vfp enabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160907 17:42:20.106">Is Rt Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:42:20.106" starttime="20160907 17:42:20.043" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
<tag>osprey</tag>
<tag>ospreyWithoutAudio</tag>
</tags>
<status critical="yes" endtime="20160907 17:42:20.106" starttime="20160907 17:42:13.618" status="PASS"></status>
</test>
<test name="Enable VFP CECO Feature Channel 1 for matrox" id="s1-s1-s1-s3-t7">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:42:20.168">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:42:20.168" starttime="20160907 17:42:20.121" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:42:23.224">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:42:23.255" starttime="20160907 17:42:20.168" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:42:23.255">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:42:23.255" starttime="20160907 17:42:20.121" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:42:23.302" starttime="20160907 17:42:23.271" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:42:23.302">'is vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:42:23.302">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:42:23.302">Evaluating 'is vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:42:23.302">Comparing as boolean values</msg>
<status endtime="20160907 17:42:23.318" starttime="20160907 17:42:23.302" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:42:23.318">Precondition check on 'is vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:42:23.318">Is Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:42:23.318" starttime="20160907 17:42:23.255" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Disable Vfp Ceco">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:42:24.893">Warning pop-up Window found</msg>
<status endtime="20160907 17:42:24.893" starttime="20160907 17:42:23.318" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is vfp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:42:24.893">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:42:24.940" starttime="20160907 17:42:24.909" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:42:24.940">'is vfp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:42:24.940">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:42:24.940">Evaluating 'is vfp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:42:24.956">Comparing as boolean values</msg>
<status endtime="20160907 17:42:24.956" starttime="20160907 17:42:24.940" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:42:24.956">Requirement check on 'is vfp disabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160907 17:42:24.956">Is Vfp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:42:24.956" starttime="20160907 17:42:24.893" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfCecoFiles} = shared_keywords.Generated Ceco Files For Channel 1 After 120 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:44:24.982">Slept 2 minutes</msg>
<status endtime="20160907 17:44:24.982" starttime="20160907 17:42:24.971" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:44:26.027">Latest Ceco file:  F:\civolution\Data\WcD07681609071542_01.ce</msg>
<msg level="INFO" timestamp="20160907 17:44:26.043">${NrOfFiles} = 576</msg>
<status endtime="20160907 17:44:26.027" starttime="20160907 17:44:24.982" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:44:26.043">${NrOfCecoFiles} = 576</msg>
<status endtime="20160907 17:44:26.043" starttime="20160907 17:42:24.956" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Generated Ceco Files For Channel</arg>
<arg>1</arg>
<arg>=</arg>
<arg>${NrOfCecoFiles}</arg>
<arg>within</arg>
<arg>300 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:44:26.058">Interpreting '300 sec' as fixed value</msg>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:44:27.072">Latest Ceco file:  F:\civolution\Data\WcD07681609071542_01.ce</msg>
<status endtime="20160907 17:44:27.088" starttime="20160907 17:44:26.074" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:44:27.088">'Generated Ceco Files For Channel 1' is '576'</msg>
<msg level="INFO" timestamp="20160907 17:44:27.088">Interpreting '${NrOfCecoFiles}' as fixed value '576'</msg>
<msg level="INFO" timestamp="20160907 17:44:27.088">Evaluating 'Generated Ceco Files For Channel 1 [576]' = '${NrOfCecoFiles} [576]'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>576</arg>
<arg>576</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:44:27.104">Comparing evaluated keyword values</msg>
<status endtime="20160907 17:44:27.104" starttime="20160907 17:44:27.088" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:44:27.104">Requirement check on 'Generated Ceco Files For Channel 1 [576] = ${NrOfCecoFiles} [576]' after 1 seconds</msg>
<msg level="INFO" timestamp="20160907 17:44:27.104">Generated CecoFiles For Channel, 1
        =, 576, 576</msg>
<status endtime="20160907 17:44:27.104" starttime="20160907 17:44:26.043" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfCecoFiles} = PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:44:28.305">Latest Ceco file:  F:\civolution\Data\WcD07681609071542_01.ce</msg>
<msg level="INFO" timestamp="20160907 17:44:28.320">${NrOfCecoFiles} = 576</msg>
<status endtime="20160907 17:44:28.320" starttime="20160907 17:44:27.104" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Vfp Ceco">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:44:29.927">Warning pop-up Window found</msg>
<status endtime="20160907 17:44:29.927" starttime="20160907 17:44:28.320" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:44:29.943">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:44:29.974" starttime="20160907 17:44:29.943" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:44:29.974">'is vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:44:29.974">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:44:29.974">Evaluating 'is vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:44:29.990">Comparing as boolean values</msg>
<status endtime="20160907 17:44:29.990" starttime="20160907 17:44:29.990" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:44:29.990">Requirement check on 'is vfp enabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160907 17:44:29.990">Is Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:44:29.990" starttime="20160907 17:44:29.927" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Generated Ceco Files For Channel</arg>
<arg>1</arg>
<arg>&gt;</arg>
<arg>${NrOfCecoFiles}</arg>
<arg>within</arg>
<arg>300 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:44:30.005">Interpreting '300 sec' as fixed value</msg>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:44:31.035">Latest Ceco file:  F:\civolution\Data\WcD07681609071542_01.ce</msg>
<status endtime="20160907 17:44:31.050" starttime="20160907 17:44:30.021" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:44:31.050">'Generated Ceco Files For Channel 1' is '576'</msg>
<msg level="INFO" timestamp="20160907 17:44:31.050">Interpreting '${NrOfCecoFiles}' as fixed value '576'</msg>
<msg level="INFO" timestamp="20160907 17:44:31.050">Evaluating 'Generated Ceco Files For Channel 1 [576]' &gt; '${NrOfCecoFiles} [576]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>576</arg>
<arg>576</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:44:31.066">Comparing evaluated keyword values</msg>
<status endtime="20160907 17:44:31.066" starttime="20160907 17:44:31.050" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:44:37.056">Latest Ceco file:  F:\civolution\Data\WcD07681609071542_01.ce</msg>
<status endtime="20160907 17:44:37.056" starttime="20160907 17:44:36.074" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:44:37.056">'Generated Ceco Files For Channel 1' is '576'</msg>
<msg level="INFO" timestamp="20160907 17:44:37.072">Interpreting '${NrOfCecoFiles}' as fixed value '576'</msg>
<msg level="INFO" timestamp="20160907 17:44:37.072">Evaluating 'Generated Ceco Files For Channel 1 [576]' &gt; '${NrOfCecoFiles} [576]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>576</arg>
<arg>576</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:44:37.072">Comparing evaluated keyword values</msg>
<status endtime="20160907 17:44:37.072" starttime="20160907 17:44:37.072" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:44:43.172">Latest Ceco file:  F:\civolution\Data\WcD07681609071542_01.ce</msg>
<status endtime="20160907 17:44:43.172" starttime="20160907 17:44:42.080" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:44:43.172">'Generated Ceco Files For Channel 1' is '576'</msg>
<msg level="INFO" timestamp="20160907 17:44:43.172">Interpreting '${NrOfCecoFiles}' as fixed value '576'</msg>
<msg level="INFO" timestamp="20160907 17:44:43.172">Evaluating 'Generated Ceco Files For Channel 1 [576]' &gt; '${NrOfCecoFiles} [576]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>576</arg>
<arg>576</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:44:43.187">Comparing evaluated keyword values</msg>
<status endtime="20160907 17:44:43.187" starttime="20160907 17:44:43.187" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:44:49.178">Latest Ceco file:  F:\civolution\Data\WcD07681609071542_01.ce</msg>
<status endtime="20160907 17:44:49.193" starttime="20160907 17:44:48.195" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:44:49.193">'Generated Ceco Files For Channel 1' is '576'</msg>
<msg level="INFO" timestamp="20160907 17:44:49.193">Interpreting '${NrOfCecoFiles}' as fixed value '576'</msg>
<msg level="INFO" timestamp="20160907 17:44:49.193">Evaluating 'Generated Ceco Files For Channel 1 [576]' &gt; '${NrOfCecoFiles} [576]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>576</arg>
<arg>576</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:44:49.193">Comparing evaluated keyword values</msg>
<status endtime="20160907 17:44:49.209" starttime="20160907 17:44:49.193" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:44:55.199">Latest Ceco file:  F:\civolution\Data\WcD07681609071542_01.ce</msg>
<status endtime="20160907 17:44:55.199" starttime="20160907 17:44:54.216" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:44:55.199">'Generated Ceco Files For Channel 1' is '576'</msg>
<msg level="INFO" timestamp="20160907 17:44:55.215">Interpreting '${NrOfCecoFiles}' as fixed value '576'</msg>
<msg level="INFO" timestamp="20160907 17:44:55.215">Evaluating 'Generated Ceco Files For Channel 1 [576]' &gt; '${NrOfCecoFiles} [576]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>576</arg>
<arg>576</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:44:55.215">Comparing evaluated keyword values</msg>
<status endtime="20160907 17:44:55.230" starttime="20160907 17:44:55.215" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:45:17.261">Latest Ceco file:  F:\civolution\Data\WcD07681609071542_01.ce</msg>
<status endtime="20160907 17:45:17.276" starttime="20160907 17:45:16.247" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:45:17.276">'Generated Ceco Files For Channel 1' is '576'</msg>
<msg level="INFO" timestamp="20160907 17:45:17.276">Interpreting '${NrOfCecoFiles}' as fixed value '576'</msg>
<msg level="INFO" timestamp="20160907 17:45:17.276">Evaluating 'Generated Ceco Files For Channel 1 [576]' &gt; '${NrOfCecoFiles} [576]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>576</arg>
<arg>576</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:45:17.276">Comparing evaluated keyword values</msg>
<status endtime="20160907 17:45:17.292" starttime="20160907 17:45:17.276" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:45:39.530">Latest Ceco file:  F:\civolution\Data\WcD07681609071542_01.ce</msg>
<status endtime="20160907 17:45:39.530" starttime="20160907 17:45:38.344" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:45:39.545">'Generated Ceco Files For Channel 1' is '576'</msg>
<msg level="INFO" timestamp="20160907 17:45:39.545">Interpreting '${NrOfCecoFiles}' as fixed value '576'</msg>
<msg level="INFO" timestamp="20160907 17:45:39.545">Evaluating 'Generated Ceco Files For Channel 1 [576]' &gt; '${NrOfCecoFiles} [576]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>576</arg>
<arg>576</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:45:39.545">Comparing evaluated keyword values</msg>
<status endtime="20160907 17:45:39.561" starttime="20160907 17:45:39.545" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:46:01.822">Latest Ceco file:  F:\civolution\Data\WcD07681609071542_01.ce</msg>
<status endtime="20160907 17:46:01.822" starttime="20160907 17:46:00.792" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:46:01.822">'Generated Ceco Files For Channel 1' is '577'</msg>
<msg level="INFO" timestamp="20160907 17:46:01.838">Interpreting '${NrOfCecoFiles}' as fixed value '576'</msg>
<msg level="INFO" timestamp="20160907 17:46:01.838">Evaluating 'Generated Ceco Files For Channel 1 [577]' &gt; '${NrOfCecoFiles} [576]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>577</arg>
<arg>576</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:46:01.838">Comparing evaluated keyword values</msg>
<status endtime="20160907 17:46:01.838" starttime="20160907 17:46:01.838" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:46:01.838">Requirement check on 'Generated Ceco Files For Channel 1 [577] &gt; ${NrOfCecoFiles} [576]' after 91 seconds</msg>
<msg level="INFO" timestamp="20160907 17:46:01.838">Generated CecoFiles For Channel, 1
        &gt;, 576, 576
        Generated CecoFiles For Channel, 1
        &gt;, 576, 576
        Generated CecoFiles For Channel, 1
        &gt;, 576, 576
        Generated CecoFiles For Channel, 1
        &gt;, 576, 576
        Generated CecoFiles For Channel, 1
        &gt;, 576, 576
        Generated CecoFiles For Channel, 1
        &gt;, 576, 576
        Generated CecoFiles For Channel, 1
        &gt;, 576, 576
        Generated CecoFiles For Channel, 1
        &gt;, 577, 576</msg>
<status endtime="20160907 17:46:01.853" starttime="20160907 17:44:30.005" status="PASS"></status>
</kw>
<kw type="kw" name="${CecoFile} = PCDetectorKeywords.Latest Ceco File For Channel">
<doc>Robot keyword: Get Name of Last Ceco File for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:46:02.352">${CecoFile} = F:\civolution\Data\WcD07681609071544_01.ce</msg>
<status endtime="20160907 17:46:02.352" starttime="20160907 17:46:01.853" status="PASS"></status>
</kw>
<kw type="kw" name="${Consistency}, ${VFP_blocks}, ${AFP_blocks} = bmcecocheck.Consistency Of Ceco File">
<doc>Robot keyword: Verify format of CECO file</doc>
<arguments>
<arg>${CecoFile}</arg>
<arg>${Verbose}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:46:02.462">${Consistency} = 0</msg>
<msg level="INFO" timestamp="20160907 17:46:02.462">${VFP_blocks} = 18</msg>
<msg level="INFO" timestamp="20160907 17:46:02.462">${AFP_blocks} = 0</msg>
<status endtime="20160907 17:46:02.462" starttime="20160907 17:46:02.368" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>${Consistency}</arg>
<arg>=</arg>
<arg>${OK}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:46:02.477">Interpreting '${Consistency}' as fixed value '0'</msg>
<msg level="INFO" timestamp="20160907 17:46:02.477">Interpreting '${OK}' as fixed value '0'</msg>
<msg level="INFO" timestamp="20160907 17:46:02.477">Evaluating '${Consistency} [0]' = '${OK} [0]'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>0</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:46:02.477">Comparing as integer values</msg>
<status endtime="20160907 17:46:02.493" starttime="20160907 17:46:02.477" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:46:02.493">Requirement check on '${Consistency} [0] = ${OK} [0]'</msg>
<msg level="INFO" timestamp="20160907 17:46:02.493">=, 0, 0</msg>
<status endtime="20160907 17:46:02.493" starttime="20160907 17:46:02.462" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>${VFP_blocks}</arg>
<arg>&gt;</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:46:02.493">Interpreting '${VFP_blocks}' as fixed value '18'</msg>
<msg level="INFO" timestamp="20160907 17:46:02.508">Interpreting '0' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:46:02.508">Evaluating '${VFP_blocks} [18]' &gt; '0'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>18</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:46:02.508">Comparing as integer values</msg>
<status endtime="20160907 17:46:02.508" starttime="20160907 17:46:02.508" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:46:02.508">Requirement check on '${VFP_blocks} [18] &gt; 0'</msg>
<msg level="INFO" timestamp="20160907 17:46:02.524">&gt;, 18, 0</msg>
<status endtime="20160907 17:46:02.524" starttime="20160907 17:46:02.493" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>${AFP_blocks}</arg>
<arg>=</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:46:02.524">Interpreting '${AFP_blocks}' as fixed value '0'</msg>
<msg level="INFO" timestamp="20160907 17:46:02.524">Interpreting '0' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:46:02.524">Evaluating '${AFP_blocks} [0]' = '0'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>0</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:46:02.540">Comparing as integer values</msg>
<status endtime="20160907 17:46:02.540" starttime="20160907 17:46:02.540" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:46:02.540">Requirement check on '${AFP_blocks} [0] = 0'</msg>
<msg level="INFO" timestamp="20160907 17:46:02.540">=, 0, 0</msg>
<status endtime="20160907 17:46:02.540" starttime="20160907 17:46:02.524" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
<tag>ospreyWithoutAudio</tag>
</tags>
<status critical="yes" endtime="20160907 17:46:02.540" starttime="20160907 17:42:20.106" status="PASS"></status>
</test>
<test name="Enable VFP Features Channel 1, License Does Not Support VFP Feature for matrox" id="s1-s1-s1-s3-t8">
<kw type="kw" name="shared_keywords.Replace License File">
<doc></doc>
<arguments>
<arg>${License_without_VFP_RTVFP}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:46:06.128">[log] CLICK on L(17,29)@S(0)[0,0 1460x963]
[log] CLICK on L(122,116)@S(0)[0,0 1460x963]
[log] CLICK on L(781,525)@S(0)[0,0 1460x963]</msg>
<status endtime="20160907 17:46:06.128" starttime="20160907 17:46:02.571" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:46:21.128">Slept 15 seconds</msg>
<status endtime="20160907 17:46:21.143" starttime="20160907 17:46:06.128" status="PASS"></status>
</kw>
<status endtime="20160907 17:46:21.159" starttime="20160907 17:46:02.571" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy License File">
<doc>Robot keyword: Replace License in installation folder with license from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:46:21.159">SourceFile:  C:\PCDetector_Testing\Testing\Resources\LicenseFiles\TeletraxCVBSSVIDDetector_Without_VFP_RTVFP.lic
DestinationFile:  F:\civolution\TeletraxCVBSSVIDDetector.lic
FileExists value:  True</msg>
<status endtime="20160907 17:46:21.159" starttime="20160907 17:46:21.159" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:46:36.182">Slept 15 seconds</msg>
<status endtime="20160907 17:46:36.182" starttime="20160907 17:46:21.175" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160907 17:46:36.197" starttime="20160907 17:46:36.182" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:46:51.211">Slept 15 seconds</msg>
<status endtime="20160907 17:46:51.227" starttime="20160907 17:46:36.197" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:47:24.970">License warning not found, no need to make it disappear</msg>
<status endtime="20160907 17:47:24.970" starttime="20160907 17:46:51.227" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:47:39.970">Slept 15 seconds</msg>
<status endtime="20160907 17:47:40.001" starttime="20160907 17:47:24.970" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:47:41.951">[log] CLICK on L(192,99)@S(0)[0,0 1460x963]
[log] CLICK on L(1059,100)@S(0)[0,0 1460x963]</msg>
<status endtime="20160907 17:47:41.951" starttime="20160907 17:47:40.001" status="PASS"></status>
</kw>
<status endtime="20160907 17:47:41.951" starttime="20160907 17:46:51.227" status="PASS"></status>
</kw>
<status endtime="20160907 17:47:41.951" starttime="20160907 17:46:21.159" status="PASS"></status>
</kw>
<status endtime="20160907 17:47:41.951" starttime="20160907 17:46:02.555" status="PASS"></status>
</kw>
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:47:42.013">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:47:42.013" starttime="20160907 17:47:41.967" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:47:45.053">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:47:45.084" starttime="20160907 17:47:42.013" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:47:45.084">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:47:45.084" starttime="20160907 17:47:41.967" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is watermarking enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Watermarking Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:47:45.131" starttime="20160907 17:47:45.100" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:47:45.131">'is watermarking enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:47:45.131">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:47:45.131">Evaluating 'is watermarking enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:47:45.131">Comparing as boolean values</msg>
<status endtime="20160907 17:47:45.146" starttime="20160907 17:47:45.131" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:47:45.146">Precondition check on 'is watermarking enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:47:45.146">Is Watermarking Enabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:47:45.146" starttime="20160907 17:47:45.084" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is vfp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:47:45.193" starttime="20160907 17:47:45.162" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:47:45.193">'is vfp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:47:45.193">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:47:45.193">Evaluating 'is vfp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:47:45.193">Comparing as boolean values</msg>
<status endtime="20160907 17:47:45.193" starttime="20160907 17:47:45.193" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:47:45.193">Precondition check on 'is vfp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:47:45.193">Is Vfp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:47:45.209" starttime="20160907 17:47:45.146" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt vfp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Vfp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:47:45.240" starttime="20160907 17:47:45.224" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:47:45.256">'is rt vfp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:47:45.256">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:47:45.256">Evaluating 'is rt vfp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:47:45.256">Comparing as boolean values</msg>
<status endtime="20160907 17:47:45.271" starttime="20160907 17:47:45.256" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:47:45.271">Precondition check on 'is rt vfp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:47:45.271">Is Rt Vfp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:47:45.271" starttime="20160907 17:47:45.209" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:47:45.302" starttime="20160907 17:47:45.287" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:47:45.318">'is afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:47:45.318">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:47:45.318">Evaluating 'is afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:47:45.318">Comparing as boolean values</msg>
<status endtime="20160907 17:47:45.318" starttime="20160907 17:47:45.318" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:47:45.318">Precondition check on 'is afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:47:45.318">Is Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:47:45.334" starttime="20160907 17:47:45.271" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:47:45.365" starttime="20160907 17:47:45.349" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:47:45.365">'is rt afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:47:45.365">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:47:45.380">Evaluating 'is rt afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:47:45.380">Comparing as boolean values</msg>
<status endtime="20160907 17:47:45.380" starttime="20160907 17:47:45.380" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:47:45.380">Precondition check on 'is rt afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:47:45.380">Is Rt Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:47:45.380" starttime="20160907 17:47:45.334" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is thumbnail enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Thumbnail Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:47:45.443" starttime="20160907 17:47:45.412" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:47:45.443">'is thumbnail enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:47:45.443">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:47:45.443">Evaluating 'is thumbnail enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:47:45.458">Comparing as boolean values</msg>
<status endtime="20160907 17:47:45.458" starttime="20160907 17:47:45.458" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:47:45.458">Precondition check on 'is thumbnail enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:47:45.458">Is Thumbnail Enabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:47:45.458" starttime="20160907 17:47:45.396" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:47:45.521" starttime="20160907 17:47:45.490" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:47:45.536">'is cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:47:45.536">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:47:45.536">Evaluating 'is cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:47:45.536">Comparing as boolean values</msg>
<status endtime="20160907 17:47:45.536" starttime="20160907 17:47:45.536" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:47:45.552">Precondition check on 'is cc disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:47:45.552">Is Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:47:45.552" starttime="20160907 17:47:45.474" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:47:45.630" starttime="20160907 17:47:45.583" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:47:45.630">'is rt cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:47:45.630">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:47:45.630">Evaluating 'is rt cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:47:45.646">Comparing as boolean values</msg>
<status endtime="20160907 17:47:45.646" starttime="20160907 17:47:45.646" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:47:45.646">Precondition check on 'is rt cc disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:47:45.646">Is Rt Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:47:45.646" starttime="20160907 17:47:45.552" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Vfp Ceco">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:47:50.185">Exception in Warning popup-Window: Not Found
Warning pop-up Window is not displayed</msg>
<status endtime="20160907 17:47:50.185" starttime="20160907 17:47:45.661" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Vfp Streaming">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:47:54.101">Exception in Warning popup-Window: Not Found
Warning pop-up Window is not displayed</msg>
<status endtime="20160907 17:47:54.101" starttime="20160907 17:47:50.185" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfCecoFiles} = PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:47:55.255">Latest Ceco file:  F:\civolution\Data\WcD07681609071546_01.ce</msg>
<msg level="INFO" timestamp="20160907 17:47:55.255">${NrOfCecoFiles} = 578</msg>
<status endtime="20160907 17:47:55.255" starttime="20160907 17:47:54.101" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is vfp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:47:55.271">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:47:55.302" starttime="20160907 17:47:55.271" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:47:55.302">'is vfp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:47:55.302">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:47:55.302">Evaluating 'is vfp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:47:55.302">Comparing as boolean values</msg>
<status endtime="20160907 17:47:55.318" starttime="20160907 17:47:55.302" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:47:55.318">Requirement check on 'is vfp disabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160907 17:47:55.318">Is Vfp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:47:55.318" starttime="20160907 17:47:55.255" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is rt vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:47:55.364" starttime="20160907 17:47:55.333" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:47:55.364">'is rt vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:47:55.364">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:47:55.364">Evaluating 'is rt vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:47:55.364">Comparing as boolean values</msg>
<status endtime="20160907 17:47:55.380" starttime="20160907 17:47:55.364" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:47:55.380">Requirement check on 'is rt vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:47:55.380">Is Rt Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:47:55.380" starttime="20160907 17:47:55.318" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Generated Ceco Files For Channel</arg>
<arg>1</arg>
<arg>=</arg>
<arg>${NrOfCecoFiles}</arg>
<arg>within</arg>
<arg>300 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:47:55.396">Interpreting '300 sec' as fixed value</msg>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:47:56.550">Latest Ceco file:  F:\civolution\Data\WcD07681609071546_01.ce</msg>
<status endtime="20160907 17:47:56.550" starttime="20160907 17:47:55.411" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:47:56.550">'Generated Ceco Files For Channel 1' is '578'</msg>
<msg level="INFO" timestamp="20160907 17:47:56.550">Interpreting '${NrOfCecoFiles}' as fixed value '578'</msg>
<msg level="INFO" timestamp="20160907 17:47:56.550">Evaluating 'Generated Ceco Files For Channel 1 [578]' = '${NrOfCecoFiles} [578]'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>578</arg>
<arg>578</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:47:56.550">Comparing evaluated keyword values</msg>
<status endtime="20160907 17:47:56.566" starttime="20160907 17:47:56.550" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:47:56.566">Requirement check on 'Generated Ceco Files For Channel 1 [578] = ${NrOfCecoFiles} [578]' after 1 seconds</msg>
<msg level="INFO" timestamp="20160907 17:47:56.566">Generated CecoFiles For Channel, 1
        =, 578, 578</msg>
<status endtime="20160907 17:47:56.566" starttime="20160907 17:47:55.380" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Replace License File">
<doc></doc>
<arguments>
<arg>${License_All_Features_Active}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:47:58.921">[log] CLICK on L(17,29)@S(0)[0,0 1460x963]
[log] CLICK on L(122,116)@S(0)[0,0 1460x963]
[log] CLICK on L(781,525)@S(0)[0,0 1460x963]</msg>
<status endtime="20160907 17:47:58.921" starttime="20160907 17:47:56.581" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:48:13.921">Slept 15 seconds</msg>
<status endtime="20160907 17:48:13.937" starttime="20160907 17:47:58.921" status="PASS"></status>
</kw>
<status endtime="20160907 17:48:13.953" starttime="20160907 17:47:56.566" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy License File">
<doc>Robot keyword: Replace License in installation folder with license from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:48:13.953">SourceFile:  C:\PCDetector_Testing\Testing\Resources\LicenseFiles\TeletraxCVBSSVIDDetector_All_Features_Activated.lic
DestinationFile:  F:\civolution\TeletraxCVBSSVIDDetector.lic
FileExists value:  True</msg>
<status endtime="20160907 17:48:13.953" starttime="20160907 17:48:13.953" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:48:28.975">Slept 15 seconds</msg>
<status endtime="20160907 17:48:28.975" starttime="20160907 17:48:13.968" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160907 17:48:28.991" starttime="20160907 17:48:28.975" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:48:43.998">Slept 15 seconds</msg>
<status endtime="20160907 17:48:43.998" starttime="20160907 17:48:28.991" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:49:17.788">License warning not found, no need to make it disappear</msg>
<status endtime="20160907 17:49:17.788" starttime="20160907 17:48:43.998" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:49:32.788">Slept 15 seconds</msg>
<status endtime="20160907 17:49:32.819" starttime="20160907 17:49:17.788" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:49:34.754">[log] CLICK on L(236,143)@S(0)[0,0 1460x963]
[log] CLICK on L(1103,144)@S(0)[0,0 1460x963]</msg>
<status endtime="20160907 17:49:34.754" starttime="20160907 17:49:32.819" status="PASS"></status>
</kw>
<status endtime="20160907 17:49:34.754" starttime="20160907 17:48:43.998" status="PASS"></status>
</kw>
<status endtime="20160907 17:49:34.754" starttime="20160907 17:48:13.953" status="PASS"></status>
</kw>
<status endtime="20160907 17:49:34.769" starttime="20160907 17:47:56.566" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
</tags>
<status critical="yes" endtime="20160907 17:49:34.769" starttime="20160907 17:46:02.555" status="PASS"></status>
</test>
<test name="Enable VFP Streaming Channel 1, Configuration Does Not Support VFP Streaming for matrox" id="s1-s1-s1-s3-t9">
<kw type="kw" name="shared_keywords.Replace Configuration File">
<doc></doc>
<arguments>
<arg>${Configuration_No_VFP_Streaming_Active}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:49:37.156">[log] CLICK on L(17,29)@S(0)[0,0 1460x963]
[log] CLICK on L(122,116)@S(0)[0,0 1460x963]
[log] CLICK on L(781,525)@S(0)[0,0 1460x963]</msg>
<status endtime="20160907 17:49:37.156" starttime="20160907 17:49:34.800" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:49:52.179">Slept 15 seconds</msg>
<status endtime="20160907 17:49:52.179" starttime="20160907 17:49:37.172" status="PASS"></status>
</kw>
<status endtime="20160907 17:49:52.179" starttime="20160907 17:49:34.785" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy Configuration File">
<doc>Robot keyword: Replace Configuration File in installation folder with Configuration from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:49:52.179">SourceFile:  C:\PCDetector_Testing\Testing\Resources\ConfigurationFiles\TTX_WatercastProp_CCStreaming1234.cfg
DestinationFile:  F:\civolution\Cfg\TTX_WatercastProp.cfg
FileExists value:  True</msg>
<status endtime="20160907 17:49:52.179" starttime="20160907 17:49:52.179" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:50:07.208">Slept 15 seconds</msg>
<status endtime="20160907 17:50:07.224" starttime="20160907 17:49:52.194" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160907 17:50:07.224" starttime="20160907 17:50:07.224" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:50:22.239">Slept 15 seconds</msg>
<status endtime="20160907 17:50:22.270" starttime="20160907 17:50:07.239" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:50:56.091">License warning not found, no need to make it disappear</msg>
<status endtime="20160907 17:50:56.091" starttime="20160907 17:50:22.270" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:51:11.091">Slept 15 seconds</msg>
<status endtime="20160907 17:51:11.123" starttime="20160907 17:50:56.091" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:51:13.073">[log] CLICK on L(280,187)@S(0)[0,0 1460x963]
[log] CLICK on L(1147,188)@S(0)[0,0 1460x963]</msg>
<status endtime="20160907 17:51:13.073" starttime="20160907 17:51:11.123" status="PASS"></status>
</kw>
<status endtime="20160907 17:51:13.073" starttime="20160907 17:50:22.270" status="PASS"></status>
</kw>
<status endtime="20160907 17:51:13.088" starttime="20160907 17:49:52.194" status="PASS"></status>
</kw>
<status endtime="20160907 17:51:13.088" starttime="20160907 17:49:34.785" status="PASS"></status>
</kw>
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:51:13.151">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:51:13.151" starttime="20160907 17:51:13.104" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:51:16.206">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:51:16.237" starttime="20160907 17:51:13.151" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:51:16.237">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:51:16.237" starttime="20160907 17:51:13.088" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is watermarking enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Watermarking Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:51:16.284" starttime="20160907 17:51:16.253" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:51:16.284">'is watermarking enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:51:16.284">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:51:16.284">Evaluating 'is watermarking enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:51:16.284">Comparing as boolean values</msg>
<status endtime="20160907 17:51:16.300" starttime="20160907 17:51:16.284" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:51:16.300">Precondition check on 'is watermarking enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:51:16.300">Is Watermarking Enabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:51:16.300" starttime="20160907 17:51:16.237" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:51:16.346" starttime="20160907 17:51:16.315" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:51:16.346">'is vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:51:16.362">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:51:16.362">Evaluating 'is vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:51:16.362">Comparing as boolean values</msg>
<status endtime="20160907 17:51:16.378" starttime="20160907 17:51:16.362" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:51:16.378">Precondition check on 'is vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:51:16.378">Is Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:51:16.378" starttime="20160907 17:51:16.300" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt vfp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Vfp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:51:16.440" starttime="20160907 17:51:16.409" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:51:16.440">'is rt vfp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:51:16.456">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:51:16.456">Evaluating 'is rt vfp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:51:16.456">Comparing as boolean values</msg>
<status endtime="20160907 17:51:16.456" starttime="20160907 17:51:16.456" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:51:16.471">Precondition check on 'is rt vfp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:51:16.471">Is Rt Vfp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:51:16.471" starttime="20160907 17:51:16.378" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:51:16.534" starttime="20160907 17:51:16.502" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:51:16.534">'is afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:51:16.534">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:51:16.534">Evaluating 'is afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:51:16.534">Comparing as boolean values</msg>
<status endtime="20160907 17:51:16.549" starttime="20160907 17:51:16.534" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:51:16.549">Precondition check on 'is afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:51:16.549">Is Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:51:16.549" starttime="20160907 17:51:16.471" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:51:16.612" starttime="20160907 17:51:16.565" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:51:16.612">'is rt afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:51:16.612">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:51:16.612">Evaluating 'is rt afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:51:16.627">Comparing as boolean values</msg>
<status endtime="20160907 17:51:16.627" starttime="20160907 17:51:16.612" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:51:16.627">Precondition check on 'is rt afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:51:16.627">Is Rt Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:51:16.627" starttime="20160907 17:51:16.549" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is thumbnail enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Thumbnail Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:51:16.690" starttime="20160907 17:51:16.658" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:51:16.690">'is thumbnail enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:51:16.705">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:51:16.705">Evaluating 'is thumbnail enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:51:16.705">Comparing as boolean values</msg>
<status endtime="20160907 17:51:16.705" starttime="20160907 17:51:16.705" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:51:16.705">Precondition check on 'is thumbnail enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:51:16.705">Is Thumbnail Enabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:51:16.705" starttime="20160907 17:51:16.627" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:51:16.783" starttime="20160907 17:51:16.736" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:51:16.783">'is cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:51:16.783">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:51:16.799">Evaluating 'is cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:51:16.799">Comparing as boolean values</msg>
<status endtime="20160907 17:51:16.799" starttime="20160907 17:51:16.799" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:51:16.799">Precondition check on 'is cc disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:51:16.814">Is Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:51:16.814" starttime="20160907 17:51:16.721" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:51:16.877" starttime="20160907 17:51:16.830" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:51:16.877">'is rt cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:51:16.877">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:51:16.877">Evaluating 'is rt cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:51:16.877">Comparing as boolean values</msg>
<status endtime="20160907 17:51:16.877" starttime="20160907 17:51:16.877" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:51:16.892">Precondition check on 'is rt cc disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:51:16.892">Is Rt Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:51:16.892" starttime="20160907 17:51:16.814" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Vfp Streaming">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:51:20.870">Exception in Warning popup-Window: Not Found
Warning pop-up Window is not displayed</msg>
<status endtime="20160907 17:51:20.870" starttime="20160907 17:51:16.892" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is rt vfp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Vfp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:51:20.917" starttime="20160907 17:51:20.886" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:51:20.917">'is rt vfp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:51:20.917">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:51:20.917">Evaluating 'is rt vfp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:51:20.933">Comparing as boolean values</msg>
<status endtime="20160907 17:51:20.933" starttime="20160907 17:51:20.917" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:51:20.933">Requirement check on 'is rt vfp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:51:20.933">Is Rt Vfp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:51:20.933" starttime="20160907 17:51:20.870" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Replace Configuration File">
<doc></doc>
<arguments>
<arg>${Configuration_All_Streaming_Active}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:51:23.304">[log] CLICK on L(17,29)@S(0)[0,0 1460x963]
[log] CLICK on L(122,116)@S(0)[0,0 1460x963]
[log] CLICK on L(781,525)@S(0)[0,0 1460x963]</msg>
<status endtime="20160907 17:51:23.304" starttime="20160907 17:51:20.948" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:51:38.327">Slept 15 seconds</msg>
<status endtime="20160907 17:51:38.327" starttime="20160907 17:51:23.304" status="PASS"></status>
</kw>
<status endtime="20160907 17:51:38.327" starttime="20160907 17:51:20.948" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy Configuration File">
<doc>Robot keyword: Replace Configuration File in installation folder with Configuration from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:51:38.327">SourceFile:  C:\PCDetector_Testing\Testing\Resources\ConfigurationFiles\TTX_WatercastProp_AllStreaming1234.cfg
DestinationFile:  F:\civolution\Cfg\TTX_WatercastProp.cfg
FileExists value:  True</msg>
<status endtime="20160907 17:51:38.327" starttime="20160907 17:51:38.327" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:51:53.356">Slept 15 seconds</msg>
<status endtime="20160907 17:51:53.372" starttime="20160907 17:51:38.342" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160907 17:51:53.372" starttime="20160907 17:51:53.372" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:52:08.395">Slept 15 seconds</msg>
<status endtime="20160907 17:52:08.395" starttime="20160907 17:51:53.387" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:52:42.184">License warning not found, no need to make it disappear</msg>
<status endtime="20160907 17:52:42.184" starttime="20160907 17:52:08.395" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:52:57.184">Slept 15 seconds</msg>
<status endtime="20160907 17:52:57.216" starttime="20160907 17:52:42.184" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:52:59.166">[log] CLICK on L(324,231)@S(0)[0,0 1460x963]
[log] CLICK on L(1191,232)@S(0)[0,0 1460x963]</msg>
<status endtime="20160907 17:52:59.166" starttime="20160907 17:52:57.216" status="PASS"></status>
</kw>
<status endtime="20160907 17:52:59.166" starttime="20160907 17:52:08.395" status="PASS"></status>
</kw>
<status endtime="20160907 17:52:59.166" starttime="20160907 17:51:38.342" status="PASS"></status>
</kw>
<status endtime="20160907 17:52:59.181" starttime="20160907 17:51:20.933" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
</tags>
<status critical="yes" endtime="20160907 17:52:59.181" starttime="20160907 17:49:34.769" status="PASS"></status>
</test>
<test name="Verify AFP CECO Feature Channel 1 for matrox" id="s1-s1-s1-s3-t10">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:52:59.244">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:52:59.244" starttime="20160907 17:52:59.197" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:53:02.284">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:53:02.315" starttime="20160907 17:52:59.244" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:53:02.315">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:53:02.315" starttime="20160907 17:52:59.197" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:53:02.362" starttime="20160907 17:53:02.331" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:53:02.362">'is afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:53:02.378">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:53:02.378">Evaluating 'is afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:53:02.378">Comparing as boolean values</msg>
<status endtime="20160907 17:53:02.378" starttime="20160907 17:53:02.378" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:53:02.378">Precondition check on 'is afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:53:02.378">Is Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:53:02.393" starttime="20160907 17:53:02.315" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:53:02.424" starttime="20160907 17:53:02.409" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:53:02.440">'is rt afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:53:02.440">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:53:02.440">Evaluating 'is rt afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:53:02.440">Comparing as boolean values</msg>
<status endtime="20160907 17:53:02.456" starttime="20160907 17:53:02.440" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:53:02.456">Precondition check on 'is rt afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:53:02.456">Is Rt Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:53:02.456" starttime="20160907 17:53:02.393" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfCecoFiles} = shared_keywords.Generated Ceco Files For Channel 1 After 120 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:55:02.482">Slept 2 minutes</msg>
<status endtime="20160907 17:55:02.482" starttime="20160907 17:53:02.471" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:55:03.527">Latest Ceco file:  F:\civolution\Data\WcD07681609071552_01.ce</msg>
<msg level="INFO" timestamp="20160907 17:55:03.527">${NrOfFiles} = 581</msg>
<status endtime="20160907 17:55:03.527" starttime="20160907 17:55:02.482" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:55:03.527">${NrOfCecoFiles} = 581</msg>
<status endtime="20160907 17:55:03.527" starttime="20160907 17:53:02.456" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Disable Vfp Ceco">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:55:06.491">Warning pop-up Window found</msg>
<status endtime="20160907 17:55:06.491" starttime="20160907 17:55:03.543" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Generated Ceco Files For Channel</arg>
<arg>1</arg>
<arg>=</arg>
<arg>${NrOfCecoFiles}</arg>
<arg>within</arg>
<arg>300 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:55:06.507">Interpreting '300 sec' as fixed value</msg>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:55:07.646">Latest Ceco file:  F:\civolution\Data\WcD07681609071552_01.ce</msg>
<status endtime="20160907 17:55:07.661" starttime="20160907 17:55:06.522" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:55:07.661">'Generated Ceco Files For Channel 1' is '581'</msg>
<msg level="INFO" timestamp="20160907 17:55:07.661">Interpreting '${NrOfCecoFiles}' as fixed value '581'</msg>
<msg level="INFO" timestamp="20160907 17:55:07.661">Evaluating 'Generated Ceco Files For Channel 1 [581]' = '${NrOfCecoFiles} [581]'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>581</arg>
<arg>581</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:55:07.677">Comparing evaluated keyword values</msg>
<status endtime="20160907 17:55:07.677" starttime="20160907 17:55:07.661" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:55:07.677">Requirement check on 'Generated Ceco Files For Channel 1 [581] = ${NrOfCecoFiles} [581]' after 1 seconds</msg>
<msg level="INFO" timestamp="20160907 17:55:07.677">Generated CecoFiles For Channel, 1
        =, 581, 581</msg>
<status endtime="20160907 17:55:07.677" starttime="20160907 17:55:06.507" status="PASS"></status>
</kw>
<kw type="kw" name="${CecoFile} = PCDetectorKeywords.Latest Ceco File For Channel">
<doc>Robot keyword: Get Name of Last Ceco File for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:55:08.223">${CecoFile} = F:\civolution\Data\WcD07681609071552_01.ce</msg>
<status endtime="20160907 17:55:08.223" starttime="20160907 17:55:07.677" status="PASS"></status>
</kw>
<kw type="kw" name="${Consistency}, ${VFP_blocks}, ${AFP_blocks} = bmcecocheck.Consistency Of Ceco File">
<doc>Robot keyword: Verify format of CECO file</doc>
<arguments>
<arg>${CecoFile}</arg>
<arg>${Verbose}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:55:08.301">${Consistency} = 0</msg>
<msg level="INFO" timestamp="20160907 17:55:08.301">${VFP_blocks} = 19</msg>
<msg level="INFO" timestamp="20160907 17:55:08.301">${AFP_blocks} = 0</msg>
<status endtime="20160907 17:55:08.301" starttime="20160907 17:55:08.238" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>${Consistency}</arg>
<arg>=</arg>
<arg>${OK}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:55:08.316">Interpreting '${Consistency}' as fixed value '0'</msg>
<msg level="INFO" timestamp="20160907 17:55:08.316">Interpreting '${OK}' as fixed value '0'</msg>
<msg level="INFO" timestamp="20160907 17:55:08.316">Evaluating '${Consistency} [0]' = '${OK} [0]'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>0</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:55:08.332">Comparing as integer values</msg>
<status endtime="20160907 17:55:08.332" starttime="20160907 17:55:08.316" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:55:08.332">Requirement check on '${Consistency} [0] = ${OK} [0]'</msg>
<msg level="INFO" timestamp="20160907 17:55:08.332">=, 0, 0</msg>
<status endtime="20160907 17:55:08.332" starttime="20160907 17:55:08.316" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>${VFP_blocks}</arg>
<arg>=</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:55:08.348">Interpreting '${VFP_blocks}' as fixed value '19'</msg>
<msg level="INFO" timestamp="20160907 17:55:08.348">Interpreting '0' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:55:08.348">Evaluating '${VFP_blocks} [19]' = '0'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>19</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:55:08.348">Comparing as integer values</msg>
<status endtime="20160907 17:55:08.363" starttime="20160907 17:55:08.348" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:55:08.363">=, 19, 0</msg>
<msg level="FAIL" timestamp="20160907 17:55:08.363">CheckFailed: Requirement check on '${VFP_blocks} [19] = 0'</msg>
<msg level="INFO" timestamp="20160907 17:55:08.363">Saving screenshot Enable and Disable Features-Verify AFP CECO Feature Channel 1 for matrox-=_20160907-17h55m08.363.png</msg>
<msg level="INFO" html="yes" timestamp="20160907 17:55:08.675">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="Enable and Disable Features-Verify AFP CECO Feature Channel 1 for matrox-=_20160907-17h55m08.363.png"&gt;&lt;img src="Enable and Disable Features-Verify AFP CECO Feature Channel 1 for matrox-=_20160907-17h55m08.363.png" width="800px"&gt;&lt;/a&gt;</msg>
<status endtime="20160907 17:55:08.363" starttime="20160907 17:55:08.332" status="FAIL"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>${AFP_blocks}</arg>
<arg>=</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:55:08.691">Interpreting '${AFP_blocks}' as fixed value '0'</msg>
<msg level="INFO" timestamp="20160907 17:55:08.691">Interpreting '0' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:55:08.691">Evaluating '${AFP_blocks} [0]' = '0'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>0</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:55:08.691">Comparing as integer values</msg>
<status endtime="20160907 17:55:08.706" starttime="20160907 17:55:08.691" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:55:08.706">Requirement check on '${AFP_blocks} [0] = 0'</msg>
<msg level="INFO" timestamp="20160907 17:55:08.706">=, 0, 0</msg>
<status endtime="20160907 17:55:08.706" starttime="20160907 17:55:08.675" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Vfp Ceco">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:55:10.298">Warning pop-up Window found</msg>
<status endtime="20160907 17:55:10.298" starttime="20160907 17:55:08.706" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
<tag>ospreyWithoutAudio</tag>
</tags>
<status critical="yes" endtime="20160907 17:55:10.298" starttime="20160907 17:52:59.181" status="FAIL">CheckFailed: Requirement check on '${VFP_blocks} [19] = 0'</status>
</test>
<test name="Enable Thumbnail Capturing Feature Channel 1-Matrox, License Does Not Support Thumbnail Feature" id="s1-s1-s1-s3-t11">
<kw type="kw" name="shared_keywords.Replace License File">
<doc></doc>
<arguments>
<arg>${License_without_Thumbnails}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:55:13.964">[log] CLICK on L(17,29)@S(0)[0,0 1460x963]
[log] CLICK on L(122,116)@S(0)[0,0 1460x963]
[log] CLICK on L(781,525)@S(0)[0,0 1460x963]</msg>
<status endtime="20160907 17:55:13.964" starttime="20160907 17:55:10.329" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:55:28.964">Slept 15 seconds</msg>
<status endtime="20160907 17:55:28.979" starttime="20160907 17:55:13.964" status="PASS"></status>
</kw>
<status endtime="20160907 17:55:28.995" starttime="20160907 17:55:10.313" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy License File">
<doc>Robot keyword: Replace License in installation folder with license from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:55:28.995">SourceFile:  C:\PCDetector_Testing\Testing\Resources\LicenseFiles\TeletraxCVBSSVIDDetector_Without_Thumbnails.lic
DestinationFile:  F:\civolution\TeletraxCVBSSVIDDetector.lic
FileExists value:  True</msg>
<status endtime="20160907 17:55:28.995" starttime="20160907 17:55:28.995" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:55:44.018">Slept 15 seconds</msg>
<status endtime="20160907 17:55:44.018" starttime="20160907 17:55:29.011" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160907 17:55:44.033" starttime="20160907 17:55:44.018" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:55:59.047">Slept 15 seconds</msg>
<status endtime="20160907 17:55:59.063" starttime="20160907 17:55:44.033" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:56:32.603">License warning not found, no need to make it disappear</msg>
<status endtime="20160907 17:56:32.603" starttime="20160907 17:55:59.063" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:56:47.632">Slept 15 seconds</msg>
<status endtime="20160907 17:56:47.648" starttime="20160907 17:56:32.603" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:56:49.582">[log] CLICK on L(148,55)@S(0)[0,0 1460x963]
[log] CLICK on L(1015,56)@S(0)[0,0 1460x963]</msg>
<status endtime="20160907 17:56:49.582" starttime="20160907 17:56:47.648" status="PASS"></status>
</kw>
<status endtime="20160907 17:56:49.582" starttime="20160907 17:55:59.063" status="PASS"></status>
</kw>
<status endtime="20160907 17:56:49.582" starttime="20160907 17:55:28.995" status="PASS"></status>
</kw>
<status endtime="20160907 17:56:49.582" starttime="20160907 17:55:10.313" status="PASS"></status>
</kw>
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:56:49.645">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:56:49.645" starttime="20160907 17:56:49.598" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:56:52.685">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:56:52.716" starttime="20160907 17:56:49.645" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:56:52.716">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:56:52.716" starttime="20160907 17:56:49.598" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is watermarking enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Watermarking Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:56:52.763" starttime="20160907 17:56:52.732" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:56:52.763">'is watermarking enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:56:52.763">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:56:52.763">Evaluating 'is watermarking enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:56:52.763">Comparing as boolean values</msg>
<status endtime="20160907 17:56:52.779" starttime="20160907 17:56:52.763" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:56:52.779">Precondition check on 'is watermarking enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:56:52.779">Is Watermarking Enabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:56:52.779" starttime="20160907 17:56:52.716" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:56:52.810" starttime="20160907 17:56:52.794" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:56:52.825">'is vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:56:52.825">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:56:52.825">Evaluating 'is vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:56:52.825">Comparing as boolean values</msg>
<status endtime="20160907 17:56:52.825" starttime="20160907 17:56:52.825" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:56:52.825">Precondition check on 'is vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:56:52.841">Is Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:56:52.841" starttime="20160907 17:56:52.779" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:56:52.872" starttime="20160907 17:56:52.857" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:56:52.872">'is rt vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:56:52.872">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:56:52.872">Evaluating 'is rt vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:56:52.888">Comparing as boolean values</msg>
<status endtime="20160907 17:56:52.888" starttime="20160907 17:56:52.888" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:56:52.888">Precondition check on 'is rt vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:56:52.888">Is Rt Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:56:52.888" starttime="20160907 17:56:52.841" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:56:52.935" starttime="20160907 17:56:52.903" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:56:52.935">'is afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:56:52.935">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:56:52.935">Evaluating 'is afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:56:52.950">Comparing as boolean values</msg>
<status endtime="20160907 17:56:52.950" starttime="20160907 17:56:52.950" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:56:52.950">Precondition check on 'is afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:56:52.950">Is Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:56:52.950" starttime="20160907 17:56:52.888" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:56:52.997" starttime="20160907 17:56:52.966" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:56:52.997">'is rt afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:56:52.997">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:56:52.997">Evaluating 'is rt afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:56:52.997">Comparing as boolean values</msg>
<status endtime="20160907 17:56:53.013" starttime="20160907 17:56:52.997" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:56:53.013">Precondition check on 'is rt afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:56:53.013">Is Rt Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:56:53.013" starttime="20160907 17:56:52.950" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is thumbnail disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Thumbnail Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:56:53.059" starttime="20160907 17:56:53.044" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:56:53.059">'is thumbnail disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:56:53.059">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:56:53.059">Evaluating 'is thumbnail disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:56:53.075">Comparing as boolean values</msg>
<status endtime="20160907 17:56:53.075" starttime="20160907 17:56:53.075" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:56:53.075">Precondition check on 'is thumbnail disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:56:53.075">Is Thumbnail Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:56:53.075" starttime="20160907 17:56:53.028" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:56:53.122" starttime="20160907 17:56:53.091" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:56:53.122">'is cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:56:53.122">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:56:53.122">Evaluating 'is cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:56:53.122">Comparing as boolean values</msg>
<status endtime="20160907 17:56:53.137" starttime="20160907 17:56:53.122" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:56:53.137">Precondition check on 'is cc disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:56:53.137">Is Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:56:53.137" starttime="20160907 17:56:53.075" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:56:53.169" starttime="20160907 17:56:53.153" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:56:53.184">'is rt cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:56:53.184">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:56:53.184">Evaluating 'is rt cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:56:53.184">Comparing as boolean values</msg>
<status endtime="20160907 17:56:53.184" starttime="20160907 17:56:53.184" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:56:53.184">Precondition check on 'is rt cc disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:56:53.184">Is Rt Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:56:53.184" starttime="20160907 17:56:53.137" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfThumbnails} = shared_keywords.Generated Thumbnails For Channel 1 After 2 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:56:55.200">Slept 2 seconds</msg>
<status endtime="20160907 17:56:55.231" starttime="20160907 17:56:53.200" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated Thumbnails For Channel">
<doc>Robot keyword: Get Number of Generated Thumbnails for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:56:55.933">${NrOfFiles} = 7336</msg>
<status endtime="20160907 17:56:55.933" starttime="20160907 17:56:55.231" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:56:55.933">${NrOfThumbnails} = 7336</msg>
<status endtime="20160907 17:56:55.933" starttime="20160907 17:56:53.200" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Thumbnail Capturing">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:56:59.771">Exception in Warning popup-Window: Not Found
Warning pop-up Window is not displayed</msg>
<status endtime="20160907 17:56:59.771" starttime="20160907 17:56:55.949" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is thumbnail disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:56:59.771">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Thumbnail Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:56:59.818" starttime="20160907 17:56:59.787" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:56:59.818">'is thumbnail disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:56:59.818">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:56:59.818">Evaluating 'is thumbnail disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:56:59.833">Comparing as boolean values</msg>
<status endtime="20160907 17:56:59.833" starttime="20160907 17:56:59.818" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:56:59.833">Precondition check on 'is thumbnail disabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160907 17:56:59.833">Is Thumbnail Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:56:59.833" starttime="20160907 17:56:59.771" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Generated Thumbnails For Channel 1 After 60 Seconds</arg>
<arg>=</arg>
<arg>${NrOfThumbnails}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Generated Thumbnails For Channel 1 After 60 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:57:59.880">Slept 1 minute</msg>
<status endtime="20160907 17:57:59.896" starttime="20160907 17:56:59.865" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated Thumbnails For Channel">
<doc>Robot keyword: Get Number of Generated Thumbnails for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:58:00.426">${NrOfFiles} = 7336</msg>
<status endtime="20160907 17:58:00.426" starttime="20160907 17:57:59.896" status="PASS"></status>
</kw>
<status endtime="20160907 17:58:00.442" starttime="20160907 17:56:59.849" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:58:00.442">'Generated Thumbnails For Channel 1 After 60 Seconds' is '7336'</msg>
<msg level="INFO" timestamp="20160907 17:58:00.442">Interpreting '${NrOfThumbnails}' as fixed value '7336'</msg>
<msg level="INFO" timestamp="20160907 17:58:00.442">Evaluating 'Generated Thumbnails For Channel 1 After 60 Seconds [7336]' = '${NrOfThumbnails} [7336]'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>7336</arg>
<arg>7336</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:58:00.442">Comparing evaluated keyword values</msg>
<status endtime="20160907 17:58:00.442" starttime="20160907 17:58:00.442" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:58:00.457">Requirement check on 'Generated Thumbnails For Channel 1 After 60 Seconds [7336] = ${NrOfThumbnails} [7336]'</msg>
<msg level="INFO" timestamp="20160907 17:58:00.457">Generated Thumbnails For Channel 1 After 60 Seconds
        =, 7336, 7336</msg>
<status endtime="20160907 17:58:00.457" starttime="20160907 17:56:59.833" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Replace License File">
<doc></doc>
<arguments>
<arg>${License_All_Features_Active}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:58:02.828">[log] CLICK on L(17,29)@S(0)[0,0 1460x963]
[log] CLICK on L(122,116)@S(0)[0,0 1460x963]
[log] CLICK on L(781,525)@S(0)[0,0 1460x963]</msg>
<status endtime="20160907 17:58:02.828" starttime="20160907 17:58:00.457" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:58:17.836">Slept 15 seconds</msg>
<status endtime="20160907 17:58:17.836" starttime="20160907 17:58:02.828" status="PASS"></status>
</kw>
<status endtime="20160907 17:58:17.836" starttime="20160907 17:58:00.457" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy License File">
<doc>Robot keyword: Replace License in installation folder with license from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:58:17.836">SourceFile:  C:\PCDetector_Testing\Testing\Resources\LicenseFiles\TeletraxCVBSSVIDDetector_All_Features_Activated.lic
DestinationFile:  F:\civolution\TeletraxCVBSSVIDDetector.lic
FileExists value:  True</msg>
<status endtime="20160907 17:58:17.836" starttime="20160907 17:58:17.836" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:58:32.851">Slept 15 seconds</msg>
<status endtime="20160907 17:58:32.883" starttime="20160907 17:58:17.851" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160907 17:58:32.883" starttime="20160907 17:58:32.883" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:58:47.898">Slept 15 seconds</msg>
<status endtime="20160907 17:58:47.914" starttime="20160907 17:58:32.898" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:59:20.986">License warning not found, no need to make it disappear</msg>
<status endtime="20160907 17:59:20.986" starttime="20160907 17:58:47.930" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:59:35.986">Slept 15 seconds</msg>
<status endtime="20160907 17:59:36.002" starttime="20160907 17:59:20.986" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 17:59:38.061">[log] CLICK on L(192,99)@S(0)[0,0 1460x963]
[log] CLICK on L(1059,100)@S(0)[0,0 1460x963]</msg>
<status endtime="20160907 17:59:38.061" starttime="20160907 17:59:36.017" status="PASS"></status>
</kw>
<status endtime="20160907 17:59:38.061" starttime="20160907 17:58:47.930" status="PASS"></status>
</kw>
<status endtime="20160907 17:59:38.061" starttime="20160907 17:58:17.851" status="PASS"></status>
</kw>
<status endtime="20160907 17:59:38.061" starttime="20160907 17:58:00.457" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
</tags>
<status critical="yes" endtime="20160907 17:59:38.077" starttime="20160907 17:55:10.298" status="PASS"></status>
</test>
<test name="Verify AFP Streaming Channel 1 for matrox" id="s1-s1-s1-s3-t12">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:59:38.139">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:59:38.139" starttime="20160907 17:59:38.092" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:59:41.179">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:59:41.210" starttime="20160907 17:59:38.139" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:59:41.210">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:59:41.210" starttime="20160907 17:59:38.092" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:59:41.257" starttime="20160907 17:59:41.225" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:59:41.257">'is afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:59:41.257">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:59:41.257">Evaluating 'is afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:59:41.272">Comparing as boolean values</msg>
<status endtime="20160907 17:59:41.272" starttime="20160907 17:59:41.272" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:59:41.272">Precondition check on 'is afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:59:41.272">Is Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:59:41.272" starttime="20160907 17:59:41.210" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:59:41.319" starttime="20160907 17:59:41.288" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:59:41.319">'is rt afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:59:41.319">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:59:41.319">Evaluating 'is rt afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:59:41.335">Comparing as boolean values</msg>
<status endtime="20160907 17:59:41.335" starttime="20160907 17:59:41.335" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:59:41.335">Precondition check on 'is rt afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:59:41.335">Is Rt Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:59:41.335" starttime="20160907 17:59:41.272" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Afp Streaming">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:59:45.157">Exception in Warning popup-Window: Not Found
Warning pop-up Window is not displayed</msg>
<status endtime="20160907 17:59:45.157" starttime="20160907 17:59:41.335" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is rt afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:59:45.203" starttime="20160907 17:59:45.172" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:59:45.203">'is rt afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:59:45.203">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:59:45.203">Evaluating 'is rt afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:59:45.203">Comparing as boolean values</msg>
<status endtime="20160907 17:59:45.219" starttime="20160907 17:59:45.203" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:59:45.219">Requirement check on 'is rt afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:59:45.219">Is Rt Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:59:45.219" starttime="20160907 17:59:45.157" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
<tag>ospreyWithoutAudio</tag>
</tags>
<status critical="yes" endtime="20160907 17:59:45.219" starttime="20160907 17:59:38.077" status="PASS"></status>
</test>
<test name="Verify Close Captioning Channel 1 for matrox" id="s1-s1-s1-s3-t13">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:59:45.281">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:59:45.281" starttime="20160907 17:59:45.235" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:59:48.321">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:59:48.352" starttime="20160907 17:59:45.281" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:59:48.352">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:59:48.352" starttime="20160907 17:59:45.235" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:59:48.399" starttime="20160907 17:59:48.368" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:59:48.399">'is cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:59:48.399">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:59:48.399">Evaluating 'is cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:59:48.414">Comparing as boolean values</msg>
<status endtime="20160907 17:59:48.414" starttime="20160907 17:59:48.414" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:59:48.414">Precondition check on 'is cc disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:59:48.414">Is Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:59:48.414" starttime="20160907 17:59:48.352" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:59:48.461" starttime="20160907 17:59:48.430" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:59:48.461">'is rt cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:59:48.461">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:59:48.461">Evaluating 'is rt cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:59:48.477">Comparing as boolean values</msg>
<status endtime="20160907 17:59:48.477" starttime="20160907 17:59:48.461" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:59:48.477">Precondition check on 'is rt cc disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:59:48.477">Is Rt Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:59:48.477" starttime="20160907 17:59:48.414" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Closed Captioning">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:59:52.611">Exception in Warning popup-Window: Not Found
Warning pop-up Window is not displayed</msg>
<status endtime="20160907 17:59:52.611" starttime="20160907 17:59:48.477" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:59:52.658" starttime="20160907 17:59:52.626" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:59:52.658">'is cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:59:52.658">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:59:52.658">Evaluating 'is cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:59:52.673">Comparing as boolean values</msg>
<status endtime="20160907 17:59:52.673" starttime="20160907 17:59:52.658" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:59:52.673">Requirement check on 'is cc disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:59:52.673">Is Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:59:52.673" starttime="20160907 17:59:52.611" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
</tags>
<status critical="yes" endtime="20160907 17:59:52.673" starttime="20160907 17:59:45.219" status="PASS"></status>
</test>
<test name="Verify CC Streaming Channel 1 for matrox" id="s1-s1-s1-s3-t14">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:59:52.736">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:59:52.736" starttime="20160907 17:59:52.704" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:59:55.776">Channel Confirm Error : Not active</msg>
<status endtime="20160907 17:59:55.807" starttime="20160907 17:59:52.736" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:59:55.807">${region} = R[12,76 911x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160907 17:59:55.807" starttime="20160907 17:59:52.689" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:59:55.854" starttime="20160907 17:59:55.823" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:59:55.854">'is cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:59:55.854">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:59:55.854">Evaluating 'is cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:59:55.870">Comparing as boolean values</msg>
<status endtime="20160907 17:59:55.870" starttime="20160907 17:59:55.854" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:59:55.870">Precondition check on 'is cc disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:59:55.870">Is Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:59:55.870" starttime="20160907 17:59:55.807" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:59:55.916" starttime="20160907 17:59:55.885" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:59:55.916">'is rt cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:59:55.916">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:59:55.932">Evaluating 'is rt cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:59:55.932">Comparing as boolean values</msg>
<status endtime="20160907 17:59:55.932" starttime="20160907 17:59:55.932" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:59:55.932">Precondition check on 'is rt cc disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:59:55.932">Is Rt Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:59:55.932" starttime="20160907 17:59:55.870" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Cc Streaming">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:59:59.801">Exception in Warning popup-Window: Not Found
Warning pop-up Window is not displayed</msg>
<status endtime="20160907 17:59:59.801" starttime="20160907 17:59:55.948" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is rt cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160907 17:59:59.848" starttime="20160907 17:59:59.816" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:59:59.848">'is rt cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160907 17:59:59.848">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160907 17:59:59.848">Evaluating 'is rt cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160907 17:59:59.848">Comparing as boolean values</msg>
<status endtime="20160907 17:59:59.848" starttime="20160907 17:59:59.848" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160907 17:59:59.863">Requirement check on 'is rt cc disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160907 17:59:59.863">Is Rt Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160907 17:59:59.863" starttime="20160907 17:59:59.801" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
</tags>
<status critical="yes" endtime="20160907 17:59:59.863" starttime="20160907 17:59:52.689" status="PASS"></status>
</test>
<kw type="teardown" name="shared_keywords.Set Ceco Length">
<doc></doc>
<arguments>
<arg>${15Minutes}</arg>
</arguments>
<kw type="kw" name="${RestartRequired} = PCDetector.Set Ceco Length And Stop Application">
<doc></doc>
<arguments>
<arg>${CecoLength}</arg>
</arguments>
<msg level="INFO" timestamp="20160907 18:00:06.191">Before checking the ceco
Scores 15_min_ceco=0.908942461014 and 2_min_ceco=0.953791618347 
Before finding settings area
Before finding settings input area
Before finding Dailog Button
Warning pop-up Window found</msg>
<msg level="INFO" timestamp="20160907 18:00:06.191">${RestartRequired} = True</msg>
<status endtime="20160907 18:00:06.191" starttime="20160907 17:59:59.894" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${RestartRequired}</arg>
<arg>Start PC Detector Application After 15 Seconds</arg>
</arguments>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 18:00:21.206">Slept 15 seconds</msg>
<status endtime="20160907 18:00:21.222" starttime="20160907 18:00:06.206" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160907 18:00:21.238" starttime="20160907 18:00:21.238" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 18:00:36.253">Slept 15 seconds</msg>
<status endtime="20160907 18:00:36.269" starttime="20160907 18:00:21.253" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 18:01:09.965">License warning not found, no need to make it disappear</msg>
<status endtime="20160907 18:01:09.965" starttime="20160907 18:00:36.285" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 18:01:24.972">Slept 15 seconds</msg>
<status endtime="20160907 18:01:24.972" starttime="20160907 18:01:09.965" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160907 18:01:26.922">[log] CLICK on L(258,165)@S(0)[0,0 1460x963]
[log] CLICK on L(1125,166)@S(0)[0,0 1460x963]</msg>
<status endtime="20160907 18:01:26.922" starttime="20160907 18:01:24.972" status="PASS"></status>
</kw>
<status endtime="20160907 18:01:26.922" starttime="20160907 18:00:36.285" status="PASS"></status>
</kw>
<status endtime="20160907 18:01:26.922" starttime="20160907 18:00:06.206" status="PASS"></status>
</kw>
<status endtime="20160907 18:01:26.922" starttime="20160907 18:00:06.191" status="PASS"></status>
</kw>
<status endtime="20160907 18:01:26.922" starttime="20160907 17:59:59.894" status="PASS"></status>
</kw>
<doc></doc>
<metadata>
</metadata>
<status endtime="20160907 18:01:26.938" starttime="20160907 17:28:08.096" status="FAIL"></status>
</suite>
<suite source="C:\PCDetector_Testing\Testing\Robot\Tests\10__Functional_Tests\09__Stop_Application.txt" name="Stop Application" id="s1-s1-s1-s4">
<test name="Stop PC Detector Application" id="s1-s1-s1-s4-t1">
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>no</arg>
</arguments>
<msg level="INFO" timestamp="20160907 18:01:30.869">[log] CLICK on L(17,29)@S(0)[0,0 1460x963]
[log] CLICK on L(122,116)@S(0)[0,0 1460x963]
[log] CLICK on L(863,527)@S(0)[0,0 1460x963]</msg>
<status endtime="20160907 18:01:30.869" starttime="20160907 18:01:27.297" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Close Application Window">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160907 18:01:37.858">Closing the application window failed
Failed to find dialog title or dialog button</msg>
<status endtime="20160907 18:01:37.858" starttime="20160907 18:01:30.869" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160907 18:01:39.858">Slept 2 seconds</msg>
<status endtime="20160907 18:01:39.889" starttime="20160907 18:01:37.858" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>default</tag>
</tags>
<status critical="yes" endtime="20160907 18:01:39.889" starttime="20160907 18:01:27.281" status="PASS"></status>
</test>
<doc></doc>
<metadata>
</metadata>
<status endtime="20160907 18:01:39.889" starttime="20160907 18:01:27.047" status="PASS"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status endtime="20160907 18:01:39.936" starttime="20160907 17:17:27.238" status="FAIL"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status endtime="20160907 18:01:40.123" starttime="20160907 17:17:27.175" status="FAIL"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status endtime="20160907 18:01:40.248" starttime="20160907 17:17:26.988" status="FAIL"></status>
</suite>
<statistics>
<total>
<stat pass="19" fail="2">Critical Tests</stat>
<stat pass="19" fail="2">All Tests</stat>
</total>
<tag>
<stat pass="4" fail="0" doc="" links="" combined="" info="">D-08055: Streaming error reported when stopping a channel and AFP streaming is enabled</stat>
<stat pass="2" fail="0" doc="" links="" combined="" info="">default</stat>
<stat pass="4" fail="0" doc="" links="" combined="" info="">known_issue</stat>
<stat pass="17" fail="2" doc="" links="" combined="" info="">matrox</stat>
<stat pass="9" fail="0" doc="" links="" combined="" info="">osprey</stat>
<stat pass="12" fail="2" doc="" links="" combined="" info="">ospreyWithoutAudio</stat>
</tag>
<suite>
<stat pass="19" fail="2" name="Robot" id="s1">Robot</stat>
<stat pass="19" fail="2" name="Tests" id="s1-s1">Robot.Tests</stat>
<stat pass="19" fail="2" name="Functional Tests" id="s1-s1-s1">Robot.Tests.Functional Tests</stat>
<stat pass="1" fail="0" name="Start Application" id="s1-s1-s1-s1">Robot.Tests.Functional Tests.Start Application</stat>
<stat pass="5" fail="0" name="Start and Stop Channels" id="s1-s1-s1-s2">Robot.Tests.Functional Tests.Start and Stop Channels</stat>
<stat pass="12" fail="2" name="Enable and Disable Features" id="s1-s1-s1-s3">Robot.Tests.Functional Tests.Enable and Disable Features</stat>
<stat pass="1" fail="0" name="Stop Application" id="s1-s1-s1-s4">Robot.Tests.Functional Tests.Stop Application</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
